{"version":3,"sources":["images/arrow.svg","images/user.svg","images/prevArrow.svg","images/forwArrow.svg","images/main.jpg","images/duration.svg","images/toDo.svg","images/inProgress.svg","images/done.svg","images/rocket.svg","images/upload.svg","layouts/ChartNav.js","Charts/Kanban/KanbanTail.js","Charts/Kanban/KanbanBox.js","Components/ToolTipResource.js","Service/PowerFilter.js","Charts/Kanban/KanbanBoard.js","Charts/Gantt/GanttTask.js","Errors/IncorrectDateError.js","Service/PowerDate.js","Charts/Gantt/GanttChart.js","Charts/List/TaskRow.js","Components/TaskForm.js","Components/ContextMenu.js","Charts/List/TaskList.js","Charts/Holidays/Slider.js","Charts/Holidays/Holidays.js","Charts/MainPage.js","Charts/ErrorPage.js","layouts/MainChart.js","layouts/Header.js","layouts/Filters.js","Service/PowerFileValidator.js","Errors/IncorrectFileError.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChartNav","state","isExtended","handleClickButton","setState","angleNavArrow","this","className","onClick","src","Arrow","alt","style","transform","width","to","React","Component","KanbanTail","props","task","assignments","start","finish","status","id","outlineNumber","outlineLevel","name","complexName","taskNameGenerator","borderStyle","statusColor","borderLeft","getBorderStyle","taskOwners","length","key","onMouseOver","ev","activateToolTip","onMouseOut","disactivateToolTip","User","resource","taskName","map","index","KanbanBox","kanbanTails","kanbanTasks","ToolTipResource","resources","slice","position","top","yPosition","left","xPosition","PowerFilter","keyword","Error","toUpperCase","includes","startDate","Date","parse","finishDate","taskOwner","findIndex","assignment","department","KanbanBoard","resourceInfo","taskId","clientY","clientX","positionX","positionY","primaryFilter","tasks","powerFilter","filter","isFinal","setTask","checkName","get","checkTaskBeforeDate","checkTaskAfterDate","checkDepartment","checkTaskOwner","checkStatus","filterAll","getSuperTaskName","splitNo","split","searchedNo","join","find","tasksToDo","tasksInProgress","tasksDone","filteredTasks","activeTaskIndex","GanttTask","x","y","fullName","ganttConfig","taskHeight","innerGapSize","taskDescriptionSize","xOffset","yOffset","yText","xText","height","fontSize","IncorrectDateError","params","captureStackTrace","PowerDate","date","localDateToMilliseconds","reduce","firstDate","secondDate","stringDate","formatedDete","reverse","toISOString","substring","toLocaleDateString","dates","dateString","isNaN","getTime","parseInt","getFullYear","first","second","convertToGantTasks","getMaxTaskTimeValue","minTimeValue","getMinTaskTimeValue","taskInterval","gapSize","resolution","ordinalNo","taskNameFactory","ganttTaskFacotry","setGanttNominalWidth","duration","GanttChart","zoomScope","nominalWidth","zoom","handleZoomChange","target","value","ganttCanvaWidth","gridDatesSize","daysGrid","prevProps","prevState","zoomOptions","h","ganttTasks","ganttGrid","ganttGridDates","minTime","maxTime","maxTimeValue","increaseIndex","gridComponents","iteratorTerminator","i","push","ganttResolution","timePoint","drawCanvaGrid","gridDates","getSimplifyDate","getGridDates","onChange","getStatusColor","statusName","backgroundColor","TaskRow","percentComplete","selected","indentation","paddingLeft","onDoubleClick","activateTaskForm","cursor","stopPropagation","type","checked","handleTaskSelect","TaskForm","newResource","newEffort","newResourceId","errors","messages","validateName","isEmpty","validateDates","isReverse","correctDateValue","fieldName","oppositeDate","validatePercentage","regExp","RegExp","isIncorrectValue","test","handleSubmit","preventDefault","updateTask","exitTaskForm","Object","assign","alert","handleInputChange","handleNewResourceChange","addNewResource","newAssignedResource","work","hours","minutes","seconds","handleResourceChange","deleteResource","resourcesList","resourcesInputs","step","min","display","onSubmit","htmlFor","onBlur","max","ContextMenu","contextMenu","downloadXmlFile","TaskList","isResourceInfoActive","editedTaskId","handleDoubleClickRow","handleContextMenu","exitContextMenu","handleKeyDown","window","event","keyCode","handleSelectAll","forEach","tableRows","editedTask","indexEditedTask","onKeyDown","tabIndex","onContextMenu","rem","remove","Slider","selectedValue","startRange","endRange","deacreaseValue","increaseValue","disabled","PrevArrow","NextArrow","getCurrentYear","getWeekendColor","dayName","color","Holidays","selectedYear","weekDays","handleDecrease","handleIncrease","holidays","holiday","getDay","HolidayName","day","milliNewDate","generateAbsenceRiskDate","minYear","getMinYearFromDates","maxYear","getMaxYearFromDates","MainPage","taskInfo","Duration","ToDo","Inprogress","Done","basicInfo","MainImage","ErrorPage","MainChart","path","exact","render","component","Header","filePath","handleFile","Rocket","ref","inputFile","accept","click","Upload","Filters","filters","setFilter","statusesList","angleFilterArrow","statuses","departmentList","array","indexOf","clearFilter","PowerFileValidator","template","checkedObject","result","hasOwnProperty","keys","isMsProjectStructure","file","PROJECT_OBJECT_TEMPLATE","Project","Tasks","Task","Resources","Resource","Assignments","TASK_OBJECT_TEMPLATE","UID","_text","Name","Start","Finish","OutlineNumber","OutlineLevel","PercentComplete","RESOURCE_OBJECT_TEMPLATE","ASSIGNMENT_OBJECT_TEMPLATE","TaskUID","ResourceUID","Work","IncorrectFileError","readFile","handleFileContent","reader","FileReader","onload","readAsText","combineProjectElements","taskResources","resourceId","assignedResource","setComplexName","level","selectedTask","subtasks","subtask","startsWith","parseWorkObject","workCode","App","Map","taskStatuses","TO_DO","IN_PROGRESS","DONE","files","TypeError","isXmlFile","handleProjctXml","getTaskStatus","percent","xmlText","convert","require","msProjectJson","xml2js","compact","spaces","Assignment","Array","isArray","mainOutlineNo","Group","error","message","console","log","stack","handleFilter","set","getDefaultFilters","filterdList","js2xml","ignoreComment","xmlFile","Blob","navigator","msSaveOrOpenBlob","url","URL","createObjectURL","a","document","createElement","href","download","setTimeout","revokeObjectURL","changedTask","JSON","basename","process","Boolean","location","hostname","match","ReactDOM","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,0DCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gjBCmD5BC,G,iNA5CXC,MAAQ,CACJC,YAAY,G,EAGhBC,kBAAoB,WAChB,IAAMD,GAAc,EAAKD,MAAMC,WAC/B,EAAKE,SAAS,CAACF,gB,wEAIf,IAAMG,EAAgBC,KAAKL,MAAMC,WAAa,GAAK,IAEnD,OACI,2BAAOK,UAAU,YAEb,4BAAQC,QAASF,KAAKH,mBAClB,yBACIM,IAAKC,IACLC,IAAI,GACJC,MAAO,CAACC,UAAU,UAAD,OAAYR,EAAZ,YAIzB,yBAAKO,MAAO,CAACE,MAAOR,KAAKL,MAAMC,WAAa,QAAU,QAClD,4BACI,4BACI,kBAAC,IAAD,CAASK,UAAU,aAAaQ,GAAG,WAAU,uCAEjD,4BACI,kBAAC,IAAD,CAASR,UAAU,aAAaQ,GAAG,SAAQ,0CAE/C,4BACI,kBAAC,IAAD,CAASR,UAAU,aAAaQ,GAAG,UAAS,sCAEhD,4BACI,kBAAC,IAAD,CAASR,UAAU,aAAaQ,GAAG,aAAY,gD,GApCpDC,IAAMC,Y,yBCqDdC,EAjCI,SAAAC,GAAU,IAAD,EAC0DA,EAAMC,KAAnFC,EADmB,EACnBA,YAAaC,EADM,EACNA,MAAOC,EADD,EACCA,OAAQC,EADT,EACSA,OAAQC,EADjB,EACiBA,GAAIC,EADrB,EACqBA,cAAeC,EADpC,EACoCA,aAAcC,EADlD,EACkDA,KAEtEC,EAAcF,EAAe,EAAf,sBAAuBR,EAAMW,kBAAkBJ,IAA/C,CAA+DE,IAAQ,CAACA,GAEtFG,EA3Be,SAAAP,GAErB,IAAIQ,EAAc,KAElB,OAAQR,GACR,IAAK,OACDQ,EAAc,qBACd,MACJ,IAAK,QACDA,EAAc,mBACd,MACJ,IAAK,cACDA,EAAc,qBACd,MACJ,QACIA,EAAc,cAGjB,MAAO,CAACC,WAAW,SAAD,OAAWD,EAAX,UASCE,CAAeV,GAG3BW,EAAad,EAAYe,OAC3B,yBAAKC,IAAKhB,EAAY,GAAGI,GAAIlB,UAAU,YAAY+B,YAAa,SAAAC,GAAE,OAAIpB,EAAMqB,gBAAgBD,EAAId,IAAKgB,WAAYtB,EAAMuB,oBACnH,yBAAKjC,IAAKkC,IAAMhC,IAAI,KADxB,IAC8B,2BAAIU,EAAY,GAAGuB,SAAShB,MAD1D,IACqEP,EAAYe,OAAS,GAAM,oCACrF,gCAEXS,EAAWhB,EAAYiB,KAAI,SAAClB,EAAMmB,GAAP,OAAkB,uBAAGV,IAAKU,GAAQnB,MAEnE,OACE,yBAAKrB,UAAU,aAAaK,MAAOmB,GACjC,4BAAKc,GACL,6BAAMV,GACN,6BACE,yCACc,IACXb,GAEH,uCACY,IACTC,MC/BIyB,G,MAjBG,SAAC7B,GAEjB,IAAM8B,EAAc9B,EAAM+B,YAAYJ,KAAI,SAAA1B,GAAI,OAAI,kBAAC,EAAD,CAAYiB,IAAKjB,EAAKK,GAAIL,KAAMA,EAAMoB,gBAAiBrB,EAAMqB,gBAAiBE,mBAAoBvB,EAAMuB,mBAAoBZ,kBAAmBX,EAAMW,uBAEvM,OACE,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,IAAIY,EAAMS,MACxB,uBAAGrB,UAAU,eAAe0C,EAAYb,SAE5C,yBAAK7B,UAAU,cACZ0C,MCWME,G,YAtBS,SAAAhC,GAAU,IAC3BiC,EAAajC,EAAbiC,UAEGjB,EAAaiB,EAAUC,MAAM,EAAGD,EAAUhB,QAAQU,KAAI,SAAAF,GAAQ,OAChE,oCACA,yBAAKrC,UAAU,kBAAkB8B,IAAKO,EAASA,SAASnB,IACtD,yBAAKhB,IAAKkC,IAAMhC,IAAI,KADtB,IAC4B,2BAAIiC,EAASA,SAAShB,WAK9C0B,EAAW,CACfC,IAAKpC,EAAMqC,UACXC,KAAMtC,EAAMuC,WAIhB,OAAS,yBAAK9C,MAAO0C,EAAU/C,UAAU,mBACxC4B,K,eCtBCwB,E,WAWF,aAAe,maACX,YAAArD,KAAA,MAAa,K,oDAQTc,GAUJ,OATA,YAAAd,KAAA,MAAac,EAEb,YAAAd,KAAA,OAAoB,EACpB,YAAAA,KAAA,OAAoB,EACpB,YAAAA,KAAA,OAAoB,EACpB,YAAAA,KAAA,OAAqB,EACrB,YAAAA,KAAA,OAAiB,EACjB,YAAAA,KAAA,OAAqB,EAEdA,O,gCAQDsD,GAEN,IAAI,YAAAtD,KAAD,MAAa,MAAM,IAAIuD,MAAM,qBAIhC,OAFA,YAAAvD,KAAA,OAAqBsD,GAAW,YAAAtD,KAAA,MAAWsB,KAAKkC,cAAcC,SAASH,EAAQE,eAExExD,O,yCAQQ0D,GACf,IAAI,YAAA1D,KAAD,MAAa,MAAM,IAAIuD,MAAM,qBAMhC,OAJA,YAAAvD,KAAA,OAAqB0D,GACdC,KAAKC,MAAM,YAAA5D,KAAA,MAAWgB,QAAU2C,KAAKC,MAAMF,IAC3CC,KAAKC,MAAM,YAAA5D,KAAA,MAAWiB,SAAW0C,KAAKC,MAAMF,GAE5C1D,O,0CAQS6D,GAChB,IAAI,YAAA7D,KAAD,MAAa,MAAM,IAAIuD,MAAM,qBAMhC,OAJA,YAAAvD,KAAA,OAAsB6D,GACfF,KAAKC,MAAM,YAAA5D,KAAA,MAAWgB,QAAU2C,KAAKC,MAAMC,IAC3CF,KAAKC,MAAM,YAAA5D,KAAA,MAAWiB,SAAW0C,KAAKC,MAAMC,GAE5C7D,O,qCAQI8D,GACX,IAAI,YAAA9D,KAAD,MAAa,MAAM,IAAIuD,MAAM,qBAQhC,OANA,YAAAvD,KAAA,OAAqB8D,GACb,YAAA9D,KAAA,MAAWe,aACR,YAAAf,KAAA,MAAWe,YAAYgD,WAAU,SAAAC,GAAU,OAAIA,EAAW1B,UACtD0B,EAAW1B,SAAShB,MACpB0C,EAAW1B,SAAShB,KAAKkC,cAAcC,SAASK,EAAUN,kBAAgB,EAElFxD,O,sCAQKiE,GAEZ,IAAI,YAAAjE,KAAD,MAAa,MAAM,IAAIuD,MAAM,qBAQhC,OANA,YAAAvD,KAAA,OAAsBiE,GACd,YAAAjE,KAAA,MAAWe,aACR,YAAAf,KAAA,MAAWe,YAAYgD,WAAU,SAAAC,GAAU,OAAIA,EAAW1B,UACtD0B,EAAW1B,SAAS2B,YACpBD,EAAW1B,SAAS2B,WAAWT,cAAcC,SAASQ,EAAWT,kBAAgB,EAEzFxD,O,kCAQCkB,GAER,IAAI,YAAAlB,KAAD,MAAa,MAAM,IAAIuD,MAAM,qBAIhC,OAFA,YAAAvD,KAAA,OAAkBkB,GAAU,YAAAlB,KAAA,MAAWkB,OAAOsC,cAAcC,SAASvC,EAAOsC,eAErExD,O,kCASP,IAAI,YAAAA,KAAD,MAAa,MAAM,IAAIuD,MAAM,qBAEhC,OAAO,YAAAvD,KAAA,mBAAqBA,KAArB,mBAAuCA,KAAvC,mBACAA,KADA,mBACqBA,KADrB,mBAC0CA,KAD1C,U,wMAOAqD,ICtCAa,E,2MA9FXvE,MAAQ,CACJwE,aAAc,M,EAGlBjC,gBAAkB,SAACD,EAAImC,GAAY,IACxBC,EAAoBpC,EAApBoC,QAASC,EAAWrC,EAAXqC,QAEhB,EAAKxE,SAAS,CACVqE,aAAc,CACVC,OAAQA,EACRG,UAAWD,EACXE,UAAWH,M,EAKvBjC,mBAAqB,WAEjB,EAAKtC,SAAS,CACVqE,aAAc,Q,EAItBM,cAAgB,SAACC,GACb,IAAMC,EAAc,IAAItB,EACjBuB,EAAU,EAAK/D,MAAf+D,OAEP,OAAOF,EAAME,QAAO,SAAA9D,GAAI,OAAIA,EAAK+D,SAAWF,EAAYG,QAAQhE,GAC3DiE,UAAUH,EAAOI,IAAI,SACrBC,oBAAoBL,EAAOI,IAAI,WAC/BE,mBAAmBN,EAAOI,IAAI,UAC9BG,gBAAgBP,EAAOI,IAAI,eAC3BI,eAAeR,EAAOI,IAAI,WAC1BK,YAAYT,EAAOI,IAAI,WACvBM,gB,EAITC,iBAAmB,SAAAnE,GAEf,IAAIG,EAAc,GAEZiE,EAAUpE,EAAcqE,MAAM,KAE9BC,EAAaF,EAAQzC,MAAM,EAAGyC,EAAQ1D,OAAS,GAAG6D,KAAK,KAEvD7E,EAAO,EAAKD,MAAM6D,MAAMkB,MAAK,SAAA9E,GAAI,OAAIA,EAAKM,gBAAkBsE,KAMlE,OAJI5E,EAAKO,aAAe,IACpBE,EAAW,YAAO,EAAKgE,iBAAiBzE,EAAKM,iBAG3C,GAAN,mBAAWG,GAAX,CAAwBT,EAAKQ,Q,wEAIvB,IAAD,OACDwB,EAAY,GACZ+C,EAAY,KACZC,EAAkB,KAClBC,EAAY,KACTrB,EAAS1E,KAAKa,MAAd6D,MACP,GAAIA,EAAM5C,OAAQ,CAEd,IAAMkE,EAAgBhG,KAAKyE,cAAcC,GAMzC,GAJAmB,EAAYG,EAAcpB,QAAO,SAAA9D,GAAI,MAAoB,UAAhBA,EAAKI,UAC9C4E,EAAkBE,EAAcpB,QAAO,SAAA9D,GAAI,MAAoB,gBAAhBA,EAAKI,UACpD6E,EAAYC,EAAcpB,QAAO,SAAA9D,GAAI,MAAoB,SAAhBA,EAAKI,UAE1ClB,KAAKL,MAAMwE,aAAc,CACzB,IAAM8B,EAAkBjG,KAAKa,MAAM6D,MAAMX,WAAU,SAAAjD,GAAI,OAAIA,EAAKK,KAAO,EAAKxB,MAAMwE,aAAaC,UAC/FtB,EAAY9C,KAAKa,MAAM6D,MAAMuB,GAAiBlF,aAItD,OAAO2D,EAAM5C,OAAS,GAAM,yBAAK7B,UAAU,eAEvC,kBAAC,EAAD,CAAWqB,KAAK,QAAQsB,YAAaiD,EAAW3D,gBAAiBlC,KAAKkC,gBAC3DE,mBAAoBpC,KAAKoC,mBAAoBZ,kBAAmBxB,KAAKuF,mBAEhF,kBAAC,EAAD,CAAWjE,KAAK,cAAcsB,YAAakD,EAAiB5D,gBAAiBlC,KAAKkC,gBACvEE,mBAAoBpC,KAAKoC,mBAAoBZ,kBAAmBxB,KAAKuF,mBAEhF,kBAAC,EAAD,CAAWjE,KAAK,OAAOsB,YAAamD,EAAW7D,gBAAiBlC,KAAKkC,gBAC1DE,mBAAoBpC,KAAKoC,mBAAoBZ,kBAAmBxB,KAAKuF,mBAE/EzC,EAAUhB,OAAS,EAChB,kBAAC,EAAD,CAAiBX,GAAG,UAAU2B,UAAWA,EAAWM,UAAWpD,KAAKL,MAAMwE,aAAaI,UACtErB,UAAWlD,KAAKL,MAAMwE,aAAaK,YAAe,U,GA3FzD9D,IAAMC,WCcjBuF,G,YAlBG,SAAArF,GAAU,IAAD,EAEMA,EAAMC,KAA/BqF,EAFmB,EAEnBA,EAAGC,EAFgB,EAEhBA,EAAG5F,EAFa,EAEbA,MAAO6F,EAFM,EAENA,SAFM,EAGgDxF,EAAMyF,YAAzEC,EAHmB,EAGnBA,WAAYC,EAHO,EAGPA,aAAcC,EAHP,EAGOA,oBAAqBC,EAH5B,EAG4BA,QAASC,EAHrC,EAGqCA,QAEzDC,EAAQR,EAAIG,EAAaC,EAAe,GACxCK,EAAQV,EAAI,EAGf,OACI,oCACI,0BAAMlG,UAAU,WAAWkG,EAAGA,EAAIO,EAASN,EAAGA,EAAIO,EAASnG,MAAOA,EAAOsG,OAAQP,IACjF,0BAAMtG,UAAU,sBAAsBmG,EAAGQ,EAAQD,EAASR,EAAGU,EAAQH,EAASlG,MAAM,OAAOuG,SAAUN,GAAsBJ,M,gBCHxHW,E,YAXX,aAAwB,IAAD,mDAARC,EAAQ,yBAARA,EAAQ,uBAEnB,iEAASA,KAGL1D,MAAM2D,mBACN3D,MAAM2D,kBAAN,eAA8BF,GANf,E,uCADMzD,QCkFlB4D,E,iHA1EiBzC,GAAQ,IAAD,OAC/B,OAAOA,EAAM5C,QAAU4C,EAAMlC,KAAI,SAAA1B,GAAI,OAAIA,EAAKE,SACzCwB,KAAI,SAAA4E,GAAI,OAAI,EAAKC,wBAAwBD,MACzCE,QAAO,SAACC,EAAWC,GAAZ,OAA2BD,EAAYC,EAAaD,EAAYC,O,0CAMpD9C,GAAQ,IAAD,OAC/B,OAAOA,EAAM5C,QAAU4C,EAAMlC,KAAI,SAAA1B,GAAI,OAAIA,EAAKG,UACzCuB,KAAI,SAAA4E,GAAI,OAAI,EAAKC,wBAAwBD,MACzCE,QAAO,SAACC,EAAWC,GAAZ,OAA2BD,EAAYC,EAAaD,EAAYC,O,8CAOhDC,GAC5B,IAAMC,EAAeD,EAAWhC,MAAM,KAAKkC,UAAUhC,KAAK,KAC1D,OAAOhC,KAAKC,MAAM8D,K,sCAQEN,GAEpB,OADmB,IAAIzD,KAAKyD,GACVQ,cAAcC,UAAU,EAAE,M,mCAQ3BT,GAEjB,OADmB,IAAIzD,KAAKyD,GACVU,uB,0CAQKC,GACvB,OAAOA,EAAMvF,KAAI,SAAAwF,GACb,IAAIZ,EAAO,IAAIzD,KAAKqE,GACpB,GAAGC,MAAMb,EAAKc,WAAY,MAAM,IAAIlB,EAAmB,yBACvD,OAAOmB,SAASf,EAAKgB,kBACtBd,QAAO,SAACe,EAAMC,GAAP,OAAkBD,EAAQC,EAASA,EAASD,O,0CAS/BN,GACvB,OAAOA,EAAMvF,KAAI,SAAAwF,GACb,IAAIZ,EAAO,IAAIzD,KAAKqE,GACpB,GAAGC,MAAMb,EAAKc,WAAY,MAAM,IAAIlB,EAAmB,yBACvD,OAAOmB,SAASf,EAAKgB,kBACtBd,QAAO,SAACe,EAAMC,GAAP,OAAkBD,EAAQC,EAASA,EAASD,S,KCpDxDE,EAAqB,SAAC7D,EAAO4B,EAAa9E,GAEvB2F,EAAUqB,oBAAoB9D,GAAnD,IAEM+D,EAAetB,EAAUuB,oBAAoBhE,GAE7CiE,EAAerC,EAAYC,WAAaD,EAAYG,oBAAsBH,EAAYsC,QAAUtC,EAAYE,aAKlH,OAHmB9B,EAAME,QAAO,SAAA9D,GAAI,OAAIA,EAAK+D,WACxCrC,KAAI,SAAC1B,EAAM2B,GAAP,OA3BY,SAAC3B,EAAM2H,EAAcI,EAAYC,EAAWH,EAAcI,GAAqB,IAE7F/H,EAAoDF,EAApDE,MAAOC,EAA6CH,EAA7CG,OAAQI,EAAqCP,EAArCO,aAAcD,EAAuBN,EAAvBM,cAAeE,EAAQR,EAARQ,KAE7CC,EAAcF,EAAe,EAAf,sBAAuB0H,EAAgB3H,IAAvC,CAAuDE,IAAQ,CAACA,GAE9E8E,EAAI0C,EAAYA,EAAYH,EAAeG,EAE7CtI,EAAQ2G,EAAUE,wBAAwBpG,GAAU4H,EAAa1B,EAAUE,wBAAwBrG,GAAS6H,EAOhH,OANArI,EAAQA,GAAS,EAMV,CAAC2F,GAJGgB,EAAUE,wBAAwBvG,EAAKE,OAASyH,GAAgBI,EAIhEzC,IAAG5F,QAAO6F,SAFJ9E,EAAYoE,KAAK,QAcRqD,CAAiBlI,EAAM2H,EAAkCnC,EAAYuC,WAAYpG,EAAOkG,EAAcnH,OAiD9HyH,EAAuB,SAAAvE,GAEzB,IAMMwE,EAHe/B,EAAUqB,oBAAoB9D,GAC9ByC,EAAUuB,oBAAoBhE,GAInD,OAAOwE,GARa,QAQa,KAAO,KAPnB,KADD,SAQ4BA,EAR5B,UA4HTC,E,2MA9GXC,UAAY,CAAC,GAAI,IAAK,GAAI,IAAK,EAAE,KAAK,IAAI,EAAE,G,EAE5CzJ,MAAQ,CACJ0J,aAAc,EAAKxI,MAAM6D,MAAM5C,QAAUmH,EAAqB,EAAKpI,MAAM6D,OACzE4E,KAAM,G,EASVC,iBAAmB,SAACtH,GAEhB,IAAMqH,EAAOrH,EAAGuH,OAAOC,MACvB,EAAK9J,MAAM0J,aAAeC,EAAO,MAAQ,EAAKxJ,SAAS,CAACwJ,U,EAG5D/D,iBAAmB,SAAAnE,GAEf,IAAIG,EAAc,GAEZiE,EAAUpE,EAAcqE,MAAM,KAE9BC,EAAaF,EAAQzC,MAAM,EAAGyC,EAAQ1D,OAAO,GAAG6D,KAAK,KAErD7E,EAAO,EAAKD,MAAM6D,MAAMkB,MAAK,SAAA9E,GAAI,OAAIA,EAAKM,gBAAkBsE,KAMlE,OAJG5E,EAAKO,aAAe,IACnBE,EAAW,YAAO,EAAKgE,iBAAiBzE,EAAKM,iBAG3C,GAAN,mBAAWG,GAAX,CAAwBT,EAAKQ,Q,EAIjCmD,cAAgB,SAACC,GACb,IAAMC,EAAc,IAAItB,EAEjBuB,EAAU,EAAK/D,MAAf+D,OAEP,OAAOF,EAAME,QAAO,SAAA9D,GAAI,OAAIA,EAAK+D,SAAWF,EAAYG,QAAQhE,GAC3DiE,UAAUH,EAAOI,IAAI,SACrBC,oBAAoBL,EAAOI,IAAI,WAC/BE,mBAAmBN,EAAOI,IAAI,UAC9BG,gBAAgBP,EAAOI,IAAI,eAC3BI,eAAeR,EAAOI,IAAI,WAC1BK,YAAYT,EAAOI,IAAI,WACvBM,gB,EAITgB,YAAc,CACVoD,gBAAiB,EAAK/J,MAAM0J,aAAe,EAAK1J,MAAM2J,KACtD/C,WAAY,GACZC,aAAc,EACdC,oBAAqB,GACrBkD,cAAe,GACff,QAAS,GACTlC,QAAS,GACTC,QAAS,GACTiD,SAAU,G,kFAtDKC,EAAWC,GAC1B,IAAMT,EAAerJ,KAAKa,MAAM6D,MAAM5C,QAAUmH,EAAqBjJ,KAAKa,MAAM6D,OAChF2E,IAAiBS,EAAUT,cAAgBrJ,KAAKF,SAAS,CAACuJ,eAAaC,KAAK,M,+BAuDtE,IAAD,OACLtJ,KAAKsG,YAAYoD,gBAAkB1J,KAAKL,MAAM0J,aAAerJ,KAAKL,MAAM2J,KAAO,KAAO,KAAOtJ,KAAKL,MAAM0J,aAAerJ,KAAKL,MAAM2J,KAElI,IAAMS,EAAc/J,KAAKoJ,UAAU5G,KAAI,SAAA8G,GAAI,OAAK,4BAAQG,MAAOH,GAAOA,MAElEU,EAAI,EACJC,EAAa,KACbC,EAAY,KACZC,EAAiB,KAEdzF,EAAS1E,KAAKa,MAAd6D,MAEP,GAAIA,EAAM5C,OAAQ,CAAC,IAAD,EACkE9B,KAAKsG,YAA/EC,EADQ,EACRA,WAAYE,EADJ,EACIA,oBAAoBD,EADxB,EACwBA,aAAcoC,EADtC,EACsCA,QAASc,EAD/C,EAC+CA,gBAExD1D,EAAgBhG,KAAKyE,cAAcC,GACnC0F,EAAUjD,EAAUuB,oBAAoB1C,GACxCqE,EAAUlD,EAAUqB,oBAAoBxC,GAE9ChG,KAAKsG,YAAYuC,WAAaa,GAAmBW,EAAUD,GAE3DJ,EAAKhE,EAAcpB,QAAO,SAAA9D,GAAI,OAAIA,EAAK+D,WAAS/C,QAAUyE,EAAaE,EAAsBD,EAAeoC,GAC5GqB,EAAa1B,EAAmBvC,EAAehG,KAAKsG,YAAatG,KAAKuF,kBAChE/C,KAAI,SAAA1B,GAAI,OAAK,kBAAC,EAAD,CAAWA,KAAMA,EAAMwF,YAAa,EAAKA,iBAC5D4D,EApJW,SAAC5D,EAAamC,EAAc6B,GAS9C,IATgE,IACzDV,EAAsCtD,EAAtCsD,SAAUF,EAA4BpD,EAA5BoD,gBAAiBhD,EAAWJ,EAAXI,QAG5B6D,EADqB,MACgBX,EAAW,EAElDY,EAAiB,CAAC/B,GAChBgC,EAAqBH,EAJA,MAIoCV,EAAW,EAEjEc,EAAIjC,EAAciC,GAAKD,EAAoBC,GAAKH,EACrDC,EAAeG,KAAKD,EAAIH,GAG5B,IAAMK,GAAmBlB,EAAkB,MAAQY,EAAe7B,GAElE,OAAO+B,EAAehI,KAAI,SAAAqI,GAAS,OAC/B,0BAAM5K,UAAU,WAAWkG,GAAK0E,EAAYpC,GAAgBmC,EAAiBlE,EAASN,EAAE,IAClF5F,MAdiB,MAcWoJ,EAAWgB,EAAiB9D,OAAO,YAmItDgE,CAAc9K,KAAKsG,YAAa8D,EAASC,GACrDF,EAhIU,SAAC7D,EAAamC,EAAc6B,GAS7C,IAT+D,IACxDV,EAAqDtD,EAArDsD,SAAUF,EAA2CpD,EAA3CoD,gBAAiBhD,EAA0BJ,EAA1BI,QAASiD,EAAiBrD,EAAjBqD,cAGrCY,EADqB,MACgBX,EAEvCmB,EAAY,CAACtC,GACXgC,EAAqBH,EAJA,MAIoCV,EAEtDc,EAAIjC,EAAciC,GAAKD,EAAoBC,GAAKH,EACrDQ,EAAUJ,KAAKD,EAAIH,GAGvB,IAAMK,GAAmBlB,EAAkB,MAAQY,EAAe7B,GAGlE,OAAOsC,EAAUvI,KAAI,SAACqI,EAAWpI,GAAZ,OACjB,0BAAMxC,UAAU,gBAAgBkG,GAAK0E,EAAYpC,GAAgBmC,EAAiBlE,EAASN,EAAE,KACjG5F,MAAM,OAAOuG,SAAU4C,GAAgBxC,EAAU6D,gBAAgBH,OA8GzCI,CAAajL,KAAKsG,YAAa8D,EAASC,GAG5D,OAAQ,6BAASpK,UAAU,eAC3B,yBAAKO,MAAOR,KAAKsG,YAAYoD,gBAAkB,IAAK5C,OAAO,OAAO7G,UAAU,oBACvEkK,GAEL,yBAAK3J,MAAOR,KAAKsG,YAAYoD,gBAAkB,IAAK5C,OAAQkD,EAAG/J,UAAU,cACpEiK,EACAD,GAEL,4BAAQhK,UAAU,gBAAgBqB,KAAK,OAAOmI,MAAOzJ,KAAKL,MAAM2J,KAAM4B,SAAU,SAAAjJ,GAAE,OAAE,EAAKsH,iBAAiBtH,KACpG8H,Q,GAxGWrJ,IAAMC,WC9FzBwK,EAAiB,SAAAC,GACnB,IAAI1J,EAAc,KAClB,OAAQ0J,GACJ,IAAK,OACD1J,EAAc,qBACd,MACJ,IAAK,QACDA,EAAc,qBACd,MACJ,IAAK,cACDA,EAAc,qBACd,MACJ,QACIA,EAAc,cAGtB,MAAO,CAAC2J,gBAAiB3J,IA0Bd4J,EAtBC,SAAAzK,GAAU,IAAD,EAE0FA,EAAMC,KAA9GK,EAFc,EAEdA,GAAIH,EAFU,EAEVA,MAAOC,EAFG,EAEHA,OAAQC,EAFL,EAEKA,OAAQH,EAFb,EAEaA,YAAawK,EAF1B,EAE0BA,gBAAiBC,EAF3C,EAE2CA,SAAUnK,EAFrD,EAEqDA,aAAcD,EAFnE,EAEmEA,cAAeE,EAFlF,EAEkFA,KAEjGmK,EAAc,CAACC,YAA8B,IAAhBrK,EAAa,IAG1CiB,EAAWvB,EAAYe,OAASf,EAAY,GAAGuB,SAAShB,KAAO,IAErE,OAAQ,wBAAIqK,cAAe,kBAAM9K,EAAM+K,iBAAiBzK,KACpD,4BAAKC,GACL,wBAAId,MAAOmL,GAAcnK,GACzB,4BAAKN,EAAM6G,UAAU,EAAG,KACxB,4BAAK5G,EAAO4G,UAAU,EAAG,KACzB,wBAAIvH,MAAO6K,EAAejK,IAAUA,GACpC,wBAAIZ,MAAO,CAACuL,OAAQ,WAAY7J,YAAa,SAAAC,GAAOpB,EAAMqB,gBAAgBD,EAAId,IAC9CgB,WAAYtB,EAAMuB,oBAAqBE,GAAYvB,EAAYe,OAAS,EAAI,OAAS,KACrH,wBAAI6J,cAAe,SAAA1J,GAAE,OAAIA,EAAG6J,oBAAoBP,GAChD,4BAAI,2BAAOQ,KAAK,WAAWC,QAASR,EAAUN,SAAU,SAAAjJ,GAAE,OAAEpB,EAAMoL,iBAAiBhK,EAAGd,SC8O/E+K,G,uNAlRXvM,MAAQ,CACJmB,KAAM,CACFK,GAAI,EAAKN,MAAMC,KAAKK,GACpBG,KAAM,EAAKT,MAAMC,KAAKQ,KACtBN,MAAO,EAAKH,MAAMC,KAAKE,MACvBC,OAAQ,EAAKJ,MAAMC,KAAKG,OACxBG,cAAe,EAAKP,MAAMC,KAAKM,cAC/BC,aAAc,EAAKR,MAAMC,KAAKO,aAC9BN,YAAa,EAAKF,MAAMC,KAAKC,YAC7BwK,gBAAiB,EAAK1K,MAAMC,KAAKyK,gBACjCrK,OAAQ,EAAKL,MAAMC,KAAKI,QAE5BiL,YAAa,CACTC,UAAW,EACXC,cAAe,MAEnBC,OAAQ,CACJhL,MAAM,EACNN,OAAO,EACPC,QAAQ,EACRsK,iBAAiB,I,EAIzBgB,SAAW,CACPjL,KAAM,2CACNN,MAAO,8DACPC,OAAQ,gEACRsK,gBAAiB,4C,EAGrBiB,aAAe,WAAO,IAAD,EAEM,EAAK7M,MAArB2M,EAFU,EAEVA,OACDG,GAHW,EAEF3L,KACOQ,KAAKQ,OAK3B,OAJAwK,EAAOhL,KAAOmL,EAEd,EAAK3M,SAAS,CAACwM,WAER,CAAChL,KAAMmL,I,EAIlBC,cAAgB,WAAO,IAAD,EAEK,EAAK/M,MAArBmB,EAFW,EAEXA,KAAMwL,EAFK,EAELA,OAEP5I,EAAY,IAAIC,KAAK7C,EAAKE,OAC1B6C,EAAa,IAAIF,KAAK7C,EAAKG,QAEjCqL,EAAOtL,MAAQiH,MAAMvE,EAAUwE,WAC/BoE,EAAOrL,OAASgH,MAAMpE,EAAWqE,WAEjC,IAAMyE,EAAYL,EAAOtL,OAASsL,EAAOrL,QAAUyC,EAAUwE,UAAYrE,EAAWqE,UAOpF,OALAoE,EAAOtL,MAAQsL,EAAOtL,OAAS2L,EAC/BL,EAAOrL,OAASqL,EAAOrL,QAAU0L,EAEjC,EAAK7M,SAAS,CAACwM,WAER,CACHtL,MAAOsL,EAAOtL,MACdC,OAAQqL,EAAOrL,S,EAKvB2L,iBAAmB,SAAA3K,GACf,IAAM4K,EAAY5K,EAAGuH,OAAOlI,KACtBwL,EAA4B,SAAbD,EAAuB,SAAW,QAEvD,EAAK/M,UAAS,SAAAgK,GAAc,IAEjBhJ,EAAQgJ,EAARhJ,KAIP,OAFAA,EAAKgM,GAAgBnJ,KAAKC,MAAM9C,EAAKG,QAAU0C,KAAKC,MAAM9C,EAAKE,OAASF,EAAK+L,GAAa/L,EAAKgM,GAExF,CAAChM,Y,EAKhBiM,mBAAqB,WAEjB,IAAMC,EAAS,IAAIC,OAAO,uBAFH,EAIA,EAAKtN,MAArB2M,EAJgB,EAIhBA,OAAQxL,EAJQ,EAIRA,KACToM,GAAoBF,EAAOG,KAAKrM,EAAKyK,iBAK3C,OAJAe,EAAOf,gBAAkB2B,EAEzB,EAAKpN,SAAS,CAACwM,WAER,CAACf,gBAAiB2B,I,EAG7BE,aAAe,SAAAnL,GACXA,EAAGoL,iBADc,MAGkB,EAAKxM,MAAjCyM,EAHU,EAGVA,WAAYC,EAHF,EAGEA,aACZzM,EAAQ,EAAKnB,MAAbmB,KAEDwL,EAASkB,OAAOC,OAAO,GAAI,EAAKjB,eAAgB,EAAKE,gBAAiB,EAAKK,sBAEjF,IAAK,IAAIhL,KAAOuK,EACZ,GAAIA,EAAOvK,GAAM,OAAO2L,MAAM,iFAGlCJ,EAAWxM,GACXyM,K,EAIJI,kBAAoB,SAAA1L,GAAO,IAAD,EAEAA,EAAGuH,OAAlBlI,EAFe,EAEfA,KAAMmI,EAFS,EAETA,MAEb,EAAK3J,UAAS,SAAAgK,GAAc,IACjBhJ,EAAQgJ,EAARhJ,KAGP,OAFAA,EAAKQ,GAAgB,mBAARA,EAA4B6G,SAASsB,GAASA,EAEpD,CAAC3I,Y,EAIhB8M,wBAA0B,SAAA3L,GAAO,IAAD,EACNA,EAAGuH,OAAlBlI,EADqB,EACrBA,KAAMmI,EADe,EACfA,MAEb,EAAK3J,UAAS,SAAAgK,GAAc,IACjBqC,EAAerC,EAAfqC,YAGP,OAFAA,EAAY7K,GAAQmI,EAEb,CAAC0C,mB,EAKhB0B,eAAiB,WAAO,IAAD,EACgB,EAAKlO,MAAMwM,YAAvCE,EADY,EACZA,cAAeD,EADH,EACGA,UAEtB,IAAKC,IAAkBA,EAAcvK,OAAQ,OAAO4L,MAAM,yBAE1D,IAAMI,EAAsB,CACxBxL,SAAU,EAAKzB,MAAMiC,UAAU8C,MAAK,SAAAtD,GAAQ,OAAIA,EAASnB,KAAOkL,KAChE0B,KAAM,CACFC,MAAO5B,EACP6B,QAAS,EACTC,QAAS,IAIjB,EAAKpO,UAAS,SAAAgK,GAAc,IACjBhJ,EAAQgJ,EAARhJ,KAEP,OADAA,EAAKgC,UAAU6H,KAAKmD,GACb,CACHhN,OACAqL,YAAa,CACTE,cAAe,EACfD,UAAW,Q,EAM3B+B,qBAAuB,SAAClM,EAAId,GAAQ,IAAD,EAETc,EAAGuH,OAAlBlI,EAFwB,EAExBA,KAAMmI,EAFkB,EAElBA,MAEb,EAAK3J,UAAS,SAAAgK,GAAc,IACjBhJ,EAAQgJ,EAARhJ,KAaP,OAXAA,EAAKgC,UAAYhC,EAAKgC,UAAUN,KAAI,SAAAF,GAChC,OAAIA,EAASA,SAASnB,KAAOA,EAAWmB,GAE3B,aAAThB,EACAgB,EAASA,SAAW,EAAKzB,MAAMiC,WAAa,EAAKjC,MAAMiC,UAAU8C,MAAK,SAAAtD,GAAQ,OAAIA,EAASnB,KAAOsI,KAClF,SAATnI,IACPgB,EAASyL,KAAKC,MAAQvE,GAGnBnH,MAEJ,CAACxB,Y,EAKhBsN,eAAiB,SAAAjN,GAEb,EAAKrB,UAAS,SAAAgK,GAAc,IACjBhJ,EAAQgJ,EAARhJ,KAEP,OADAA,EAAKgC,UAAYhC,EAAKgC,UAAU8B,QAAO,SAAAtC,GAAQ,OAAIA,EAASA,SAASnB,KAAOA,KACrE,CAACL,Y,wEAKN,IAAD,SACuDd,KAAKL,MAAMmB,KAAhEQ,EADF,EACEA,KAAMN,EADR,EACQA,MAAOC,EADf,EACeA,OAAQF,EADvB,EACuBA,YAAawK,EADpC,EACoCA,gBAClCe,EAAUtM,KAAKL,MAAf2M,OAED+B,EAAgBrO,KAAKa,MAAMiC,WAAa9C,KAAKa,MAAMiC,UACpD8B,QAAO,SAAAtC,GAAQ,MAAsB,KAAlBA,EAAShB,QAC5BkB,KAAI,SAAAF,GACD,MAAO,CAACA,SAAUA,EAAShB,KAAO,MAAQgB,EAAS2B,WAAY9C,GAAImB,EAASnB,OAE/EqB,KAAI,SAACF,EAAUG,GAAX,OAAsB,4BAAQV,IAAKU,EAAOgH,MAAOnH,EAASnB,IAAKmB,EAASA,aAE3EgM,EAAkBvN,EAAYyB,KAAI,SAAAwB,GAAU,OAC9C,yBAAK/D,UAAU,iBACX,4BAAQwJ,MAAOzF,EAAW1B,SAASnB,GAAIG,KAAK,WACpC4J,SAAU,SAAAjJ,GAAE,OAAI,EAAKkM,qBAAqBlM,EAAI+B,EAAW1B,SAASnB,MACrEkN,GAEL,2BAAOpO,UAAU,YAAY8L,KAAK,SAASzK,KAAK,OAAOiN,KAAK,IAAIC,IAAI,IAAI/E,MAAOzF,EAAW+J,KAAKC,MACxF9C,SAAU,SAAAjJ,GAAE,OAAI,EAAKkM,qBAAqBlM,EAAI+B,EAAW1B,SAASnB,OACzE,4BAAQ4K,KAAK,SAAS7L,QAAS,WAC3B,EAAKkO,eAAepK,EAAW1B,SAASnB,MAD5C,SAMR,OAEI,0BAAMlB,UAAU,WAAWK,MAAO,CAACmO,QAAS,SAAUC,SAAU1O,KAAKoN,cACjE,yBAAKnN,UAAU,iBAAgB,0CAC3B,yBAAKA,UAAU,eACX,2BAAO0O,QAAQ,iBAAgB,mCAA/B,OAAiD,mCAAjD,QACA,2BAAOxN,GAAG,gBAAgB4K,KAAK,OAAOzK,KAAK,OAAOmI,MAAOnI,EAClD4J,SAAU,SAAAjJ,GAAE,OAAI,EAAK0L,kBAAkB1L,IAAK2M,OAAQ5O,KAAKwM,eAC/DF,EAAOhL,MAAQ,0BAAMrB,UAAU,YAAYD,KAAKuM,SAASjL,OAE9D,yBAAKrB,UAAU,eACX,2BAAO0O,QAAQ,kBAAiB,mCAAhC,SACA,2BAAOxN,GAAG,iBAAiB4K,KAAK,OAAOzK,KAAK,QAAQmI,MAAOzI,EACpDkK,SAAU,SAAAjJ,GAAE,OAAI,EAAK0L,kBAAkB1L,IAAK2M,OAAQ5O,KAAK4M,mBAC/DN,EAAOtL,OAAS,0BAAMf,UAAU,YAAYD,KAAKuM,SAASvL,QAE/D,yBAAKf,UAAU,eACX,2BAAO0O,QAAQ,mBAAkB,mCAAjC,OACA,2BAAOxN,GAAG,kBAAkB4K,KAAK,OAAOzK,KAAK,SAASmI,MAAOxI,EACtDiK,SAAU,SAAAjJ,GAAE,OAAI,EAAK0L,kBAAkB1L,IAAK2M,OAAQ5O,KAAK4M,mBAC/DN,EAAOrL,QAAU,0BAAMhB,UAAU,YAAYD,KAAKuM,SAAStL,SAEhE,yBAAKhB,UAAU,eACX,2BAAO0O,QAAQ,iBAAgB,mCAA/B,yBACA,yBAAK1O,UAAU,iBACX,4BAAQkB,GAAG,gBAAgBG,KAAK,gBAAgBmI,MAAOzJ,KAAKL,MAAMwM,YAAYE,cACtEnB,SAAU,SAAAjJ,GAAE,OAAI,EAAK2L,wBAAwB3L,KACjD,4BAAQwH,MAAM,IAAd,aACC4E,GAEL,2BAAOlN,GAAG,YAAYlB,UAAU,YAAY8L,KAAK,SAASzK,KAAK,YACxDmI,MAAOzJ,KAAKL,MAAMwM,YAAYC,UAC9BlB,SAAU,SAAAjJ,GAAE,OAAI,EAAK2L,wBAAwB3L,MACpD,4BAAQ8J,KAAK,SAAS7L,QAASF,KAAK6N,gBAApC,QAEHS,GAEL,yBAAKrO,UAAU,eACX,2BAAO0O,QAAQ,iBAAgB,mCAA/B,cACA,2BAAOxN,GAAG,gBAAgBoN,KAAK,IAAIC,IAAI,IAAIK,IAAI,MAAM9C,KAAK,SAASzK,KAAK,kBACjEmI,MAAO8B,EAAiBL,SAAU,SAAAjJ,GAAE,OAAI,EAAK0L,kBAAkB1L,IAC/D2M,OAAQ5O,KAAK+M,qBACnBT,EAAOf,iBAAmB,0BAAMtL,UAAU,YAAYD,KAAKuM,SAAShB,kBAEzE,yBAAKtL,UAAU,eACX,2BAAO8L,KAAK,SAAStC,MAAM,SAC3B,4BAAQsC,KAAK,SAAS7L,QAAS,kBAAM,EAAKW,MAAM0M,iBAAhD,iB,GA5QD7M,IAAMC,YCedmO,G,MAdK,SAAAjO,GAEhB,IAAMmC,EAAW,CACbC,IAAKpC,EAAMkO,YAAYvK,UACvBrB,KAAMtC,EAAMkO,YAAYxK,WAG5B,OAAS,wBAAItE,UAAU,mCAAmCK,MAAO0C,GACrD,4BAAI,4BAAQ+I,KAAK,SAAS7L,QAAS,kBAAMW,EAAMmO,iBAAgB,KAA3D,uBACJ,4BAAI,4BAAQjD,KAAK,SAAS7L,QAAS,kBAAMW,EAAMmO,iBAAgB,KAA3D,0BACJ,4BAAI,4BAAQjD,KAAK,SAAS7L,QAAS,kBAAMwN,MAAM,sBAA3C,aCgKLuB,E,2MArKXtP,MAAQ,CACJuP,sBAAsB,EACtBC,aAAc,KACdhL,aAAc,KACd4K,YAAa,M,EAIjB7M,gBAAkB,SAACD,EAAImC,GAAW,IACvBC,EAAoBpC,EAApBoC,QAASC,EAAWrC,EAAXqC,QAEhB,EAAKxE,SAAS,CACVqE,aAAc,CACVC,OAAQA,EACRG,UAAWD,EACXE,UAAWH,M,EAKvBjC,mBAAqB,WAEjB,EAAKtC,SAAS,CACVqE,aAAc,Q,EAItBiL,qBAAuB,SAAAD,GACnB,EAAKrP,SAAS,CAACqP,kB,EAGnB5B,aAAe,WACX,EAAKzN,SAAS,CAACqP,aAAc,Q,EAGjCE,kBAAoB,SAAApN,GAEhB,GAAG,EAAKtC,MAAMoP,YAAa,OAAO,EAFb,IAIdzK,EAAoBrC,EAApBqC,QAASD,EAAWpC,EAAXoC,QAEhB,EAAKvE,SAAS,CACViP,YAAa,CACTxK,UAAWD,EACXE,UAAWH,M,EAKvBiL,gBAAkB,WACd,EAAKxP,SAAS,CACViP,YAAa,Q,EAIrBQ,cAAgB,SAAAtN,GAEG,MADfA,EAAKA,GAAMuN,OAAOC,OACfC,SAAkB,EAAKJ,mB,EAG9BK,gBAAkB,SAAA1N,GAEd,IAAMuJ,EAAWvJ,EAAGuH,OAAOwC,QAE3B,EAAKnL,MAAM6D,MAAMkL,SAAQ,SAAA9O,GACrBA,EAAK0K,SAAWA,EAChB,EAAK3K,MAAMyM,WAAWxM,O,EAI9BmL,iBAAmB,SAAChK,EAAId,GAEpB,IAAML,EAAO,EAAKD,MAAM6D,MAAMkB,MAAK,SAAA9E,GAAI,OAAEA,EAAKK,KAAOA,KAEjDL,IAAMA,EAAK0K,SAAWvJ,EAAGuH,OAAOwC,SAEpC,EAAKnL,MAAMyM,WAAWxM,I,EAsB1B2D,cAAgB,SAACC,GACb,IAAMC,EAAc,IAAItB,EACjBuB,EAAU,EAAK/D,MAAf+D,OAEP,OAAOF,EAAME,QAAO,SAAA9D,GAAI,OAAI6D,EAAYG,QAAQhE,GAC3CiE,UAAUH,EAAOI,IAAI,SACrBC,oBAAoBL,EAAOI,IAAI,WAC/BE,mBAAmBN,EAAOI,IAAI,UAC9BG,gBAAgBP,EAAOI,IAAI,eAC3BI,eAAeR,EAAOI,IAAI,WAC1BK,YAAYT,EAAOI,IAAI,WACvBM,gB,wEAIC,IAAD,OAEDxC,EAAY,GACZ+M,EAAY,KACZC,EAAa,KAEVpL,EAAS1E,KAAKa,MAAd6D,MACP,GAAGA,EAAM5C,OAAO,CAEZ+N,EAAY7P,KAAKyE,cAAcC,GACdlC,KAAI,SAAC1B,EAAM2B,GAAP,OAAgB,kBAAC,EAAD,CAASV,IAAKjB,EAAKK,GAAIL,KAAMA,EAAiEoB,gBAAiB,EAAKA,gBAAiBE,mBAAoB,EAAKA,mBAAoBwJ,iBAAkB,EAAKwD,qBAAsB9B,WAAY,EAAKzM,MAAMyM,WAAYrB,iBAAkB,EAAKA,sBAE9T,IAAM8D,EAAkB/P,KAAKL,MAAMwP,cAAgBnP,KAAKa,MAAM6D,MAAMX,WAAU,SAAAjD,GAAI,OAAIA,EAAKK,KAAO,EAAKxB,MAAMwP,gBAI7G,GAFAW,EAAaC,GAAmB,GAAK/P,KAAKa,MAAM6D,MAAMqL,GAElD/P,KAAKL,MAAMwE,aAAa,CACxB,IAAM8B,EAAkBjG,KAAKa,MAAM6D,MAAMX,WAAU,SAAAjD,GAAI,OAAIA,EAAKK,KAAO,EAAKxB,MAAMwE,aAAaC,UAC/FtB,EAAY9C,KAAKa,MAAM6D,MAAMuB,GAAiBlF,aAItD,OAAO2D,EAAM5C,OAAS,GAAM,6BAAS7B,UAAU,WAAWC,QAASF,KAAKsP,gBACxBU,UAAWhQ,KAAKuP,cAChBU,SAAS,IACTC,cAAe,SAAAjO,GAASA,EAAGoL,iBACvB,EAAKgC,kBAAkBpN,KACvE,+BACI,+BACI,4BACI,kCACA,oCACA,qCACA,sCACA,sCACA,yCACA,wCACA,4BAAI,2BAAO8J,KAAK,WAAWb,SAAUlL,KAAK2P,qBAGlD,+BACKE,IAGR/M,EAAUhB,OAAS,EAAI,kBAAC,EAAD,CAAiBX,GAAG,UAAU2B,UAAWA,EAAWM,UAAWpD,KAAKL,MAAMwE,aAAaI,UAAWrB,UAAWlD,KAAKL,MAAMwE,aAAaK,YAAc,KAC1KsL,GAAc,kBAAC,EAAD,CAAUhP,KAAMgP,EAAYvC,aAAcvN,KAAKuN,aAAczK,UAAW9C,KAAKa,MAAMiC,UAAWwK,WAAYtN,KAAKa,MAAMyM,aACnItN,KAAKL,MAAMoP,aAAe,kBAAC,EAAD,CAAaA,YAAa/O,KAAKL,MAAMoP,YAAaC,gBAAiBhP,KAAKa,MAAMmO,gBAAiBmB,IAAKnQ,KAAKoQ,c,GAhKzH1P,IAAMC,W,kCCSd0P,G,MAZA,SAAAxP,GAAU,IAChByP,EAAsEzP,EAAtEyP,cAAeC,EAAuD1P,EAAvD0P,WAAYC,EAA2C3P,EAA3C2P,SAAUC,EAAiC5P,EAAjC4P,eAAgBC,EAAiB7P,EAAjB6P,cAE5D,OACE,yBAAKzQ,UAAU,UACb,4BAAQ0Q,SAAUJ,GAAcD,EAAepQ,QAASuQ,GAAxD,IAAyE,yBAAKtQ,IAAKyQ,IAAWvQ,IAAI,MAClG,6BAAMiQ,GACN,4BAAQK,SAAUH,GAAYF,EAAepQ,QAASwQ,GAAtD,IAAsE,yBAAKvQ,IAAK0Q,IAAWxQ,IAAI,SCP/FyQ,G,MAAiB,WAEnB,OADc,IAAInN,MACLyE,gBA6BX2I,GAAkB,SAAAC,GAGpB,MAAO,CAACC,MADmB,WAAZD,GAAoC,aAAZA,EAAyB,mBAAqB,iBAwE1EE,G,2MAnEXvR,MAAQ,CACJwR,aAAcL,K,EAGlBM,SAAW,CAAC,SAAS,SAAS,UAAW,YAAa,WAAY,SAAU,Y,EAE5EC,eAAiB,WACb,EAAKvR,UAAS,SAAAgK,GAAY,IACjBqH,EAAgBrH,EAAhBqH,aAGL,MAAO,CAACA,eAFRA,O,EAMRG,eAAiB,WACb,EAAKxR,UAAS,SAAAgK,GAAY,IACjBqH,EAAgBrH,EAAhBqH,aAGL,MAAO,CAACA,eAFRA,O,wEAME,IAAD,OAEEA,EAAgBnR,KAAKL,MAArBwR,aACAI,EAAYvR,KAAKa,MAAjB0Q,SAGD1B,EAAY0B,EAAS3M,QAAO,SAAA4M,GAAO,OA/D7B/J,EA+D6C+J,EAAQ7N,KA9DzD,IAAIA,KAAK8D,GACVW,gBA6DoE+I,EA/D/D,IAAA1J,KA+D6EjF,KAAI,SAACgP,EAAS/O,GACrG,IA3DWgF,EA2DLuJ,EAAU,EAAKI,UA3DV3J,EA2DgC+J,EAAQ7N,KA1D7C,IAAIA,KAAK8D,GACVgK,WA0DL,OAAQ,wBAAI1P,IAAKU,GACf,4BAAKA,EAAQ,GACb,4BAAK+O,EAAQE,aACb,4BAAKF,EAAQ7N,MACb,wBAAIrD,MAAOyQ,GAAgBC,IAAWA,GACtC,4BA5DoB,SAAAvJ,GAE5B,IAAMkK,EAAM,IAAIhO,KAAK8D,GAErB,GAAGQ,MAAM0J,EAAIzJ,WAAY,MAAO,iBAEhC,IAAI0J,EAAe,KAMnB,OAHkB,IAAfD,EAAIF,UAA+B,IAAfE,EAAIF,WACvBG,EAAgC,IAAjBD,EAAIF,SAAiBE,EAAIzJ,UAHjB,MAGkDyJ,EAAIzJ,UAHtD,OAKpB0J,EAAezK,EAAU6D,gBAAgB4G,GAAgB,IAgDnDC,CAAwBL,EAAQ7N,WAInCoE,EAAQwJ,EAAS/O,KAAI,SAAAgP,GAAO,OAAIA,EAAQ7N,QACxCmO,EAAU3K,EAAU4K,oBAAoBhK,GACxCiK,EAAU7K,EAAU8K,oBAAoBlK,GAE9C,OAAS,6BAAS9H,UAAU,YAChB,kBAAC,EAAD,CAAQqQ,cAAea,EAAcZ,WAAYuB,EAAStB,SAAUwB,EAASvB,eAAgBzQ,KAAKqR,eAAgBX,cAAe1Q,KAAKsR,iBACtI,+BACI,+BACI,4BACI,kCACA,uCACA,oCACA,mCACA,8CAGZ,+BACKzB,S,GA3DFnP,IAAMC,W,4GCQduR,GAxCE,SAAArR,GAEb,IAAIsR,EAAW,KAEf,GAAItR,EAAM6D,MAAM5C,OAAQ,CACpB,IAAM+D,EAAYhF,EAAM6D,MAAME,QAAO,SAAA9D,GAAI,MAAoB,UAAhBA,EAAKI,QAAsBJ,EAAK+D,WAAS/C,OAChFgE,EAAkBjF,EAAM6D,MAAME,QAAO,SAAA9D,GAAI,MAAoB,gBAAhBA,EAAKI,QAA4BJ,EAAK+D,WAAS/C,OAC5FiE,EAAYlF,EAAM6D,MAAME,QAAO,SAAA9D,GAAI,MAAoB,SAAhBA,EAAKI,QAAqBJ,EAAK+D,WAAS/C,OAEjF4B,EAAYyD,EAAUuB,oBAAoB7H,EAAM6D,OAChDb,EAAasD,EAAUqB,oBAAoB3H,EAAM6D,OAErDyN,EAAY,yBAAKlS,UAAU,kBACvB,uCAAaY,EAAMS,KAAKmE,MAAM,QAAQ,IACtC,4BACI,4BAAI,yBAAKtF,IAAKiS,KAAU/R,IAAI,KACxB,oDAA0B8G,EAAU6D,gBAAgBtH,GAApD,OAAoEyD,EAAU6D,gBAAgBnH,GAA9F,MAEJ,4BAAI,yBAAK1D,IAAKkS,KAAMhS,IAAI,KACpB,gDAAsBwF,IAE1B,4BAAI,yBAAK1F,IAAKmS,KAAYjS,IAAI,KAC1B,sDAA4ByF,IAEhC,4BAAI,yBAAK3F,IAAKoS,KAAMlS,IAAI,KACpB,+CAAqB0F,MAKrC,IAAMyM,EAAa,yBAAKvS,UAAU,kBAAiB,iDACnD,uBAAGA,UAAU,yBAAb,8IAEA,OAAQ,6BAASA,UAAU,aACvB,yBAAKA,UAAU,oBAAoBE,IAAKsS,KAAWpS,IAAI,KAClD8R,GAAYK,ICjCVE,GATG,WACd,OACI,6BAASzS,UAAU,kBACf,qCACA,uBAAGA,UAAU,yBAAb,wDCqBG0S,I,MAfG,SAAA9R,GACd,OACA,6BAASZ,UAAU,aACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO2S,KAAK,IAAIC,OAAO,EAAMC,OAAQ,kBAAM,kBAAC,GAAcjS,MAC1D,kBAAC,IAAD,CAAO+R,KAAK,UAAUE,OAAQ,kBAAM,kBAAC,EAAiBjS,MACtD,kBAAC,IAAD,CAAO+R,KAAK,SAASE,OAAQ,kBAAM,kBAAC,EAAejS,MACnD,kBAAC,IAAD,CAAO+R,KAAK,QAAQE,OAAQ,kBAAM,kBAAC,EAAajS,MAChD,kBAAC,IAAD,CAAO+R,KAAK,YAAYE,OAAQ,kBAAM,kBAAC,GAAajS,MACpD,kBAAC,IAAD,CAAOkS,UAAWL,KANtB,U,gDCiBOM,G,iLAxBH,IAAD,SAC8BhT,KAAKa,MAAnCS,EADA,EACAA,KAAM2R,EADN,EACMA,SAAUC,EADhB,EACgBA,WACvB,OACE,yBAAKjT,UAAU,UACb,kBAAC,IAAD,CAAMA,UAAU,cAAcQ,GAAG,IAAIH,MAAO,CAAEE,MAAO,QAASsG,OAAQ,OAAQ2H,QAAS,SACrF,yBAAKtO,IAAKgT,KAAQ9S,IAAI,KACtB,6CAMF,uBAAGJ,UAAU,iBAAiBqB,EAAOA,EAAKmE,MAAM,QAAQ,GAAK,IAC7D,2BAAO2N,IAAK,SAAAC,GAAS,OAAI,EAAKA,UAAYA,GAAWtH,KAAK,OAAOuH,OAAO,WAAW7J,MAAOwJ,EAAU/H,SAAU,SAAAjJ,GAAE,OAAIiR,EAAWjR,IAC7H3B,MAAO,CAAEmO,QAAS,UACpB,4BAAQ1C,KAAK,SAAS7L,QAAS,kBAAI,EAAKmT,UAAUE,UAChD,yBAAKpT,IAAKqT,KAAQnT,IAAI,KACtB,kD,GApBWK,IAAMC,WC+EZ8S,I,iNAhFX9T,MAAQ,CACJC,YAAY,G,EAIhBC,kBAAoB,WAChB,IAAMD,GAAc,EAAKD,MAAMC,WAC/B,EAAKE,SAAS,CAACF,gB,wEAGT,IAAD,SACiDI,KAAKa,MAApD6S,EADF,EACEA,QAASC,EADX,EACWA,UAAW7Q,EADtB,EACsBA,UAAW8Q,EADjC,EACiCA,aAChCC,EAAmB7T,KAAKL,MAAMC,WAAa,IAAM,EACjDkU,EAAW,GAEXC,EAAiBjR,GAAaA,EAAU8B,QAAO,SAAAtC,GAAQ,MAA4B,KAAxBA,EAAS2B,cACjEzB,KAAI,SAAAF,GAAQ,OAAIA,EAAS2B,cACzBW,QAAO,SAACX,EAAYxB,EAAOuR,GAApB,OAA8BA,EAAMC,QAAQhQ,KAAgBxB,GAAwB,OAAfwB,KAC5EzB,KAAI,SAACyB,EAAYxB,GAAb,OAAwB,4BAAQV,IAAKU,EAAOgH,MAAOxF,GAAcA,MAE9E,GAAG2P,EAAa,CACZ,IAAInR,EAAQ,EACZ,IAAK,IAAIvB,KAAU0S,EACfE,EAASnJ,KAAM,4BAAQ5I,IAAKU,EACLgH,MAAOmK,EAAa1S,IACnB0S,EAAa1S,GAAQsC,gBAC7Cf,IAIR,OACI,6BAASxC,UAAU,WACf,4BAAQC,QAASF,KAAKH,mBAClB,yBAAKM,IAAKC,IAAOC,IAAI,QAAQC,MAAO,CAACC,UAAU,UAAD,OAAYsT,EAAZ,WAC9C,uCAEJ,yBAAK5T,UAAU,gBAAgBK,MAAO,CAACwG,OAAQ9G,KAAKL,MAAMC,WAAa,OAAS,QAC5E,yBAAKK,UAAU,YACX,2BAAO0O,QAAQ,cAAf,cACA,2BAAOxN,GAAG,aAAa4K,KAAK,OAAOzK,KAAK,OAAO4J,SAAUyI,EAAWlK,MAAOiK,EAAQ1O,IAAI,UACvF,4BAAQ+G,KAAK,SAAS7L,QAAS,SAAA+B,GAAE,OAAE,EAAKpB,MAAMqT,YAAYjS,IAAKX,KAAK,OAAOrB,UAAU,gBAArF,MAEJ,yBAAKA,UAAU,YACX,2BAAO0O,QAAQ,mBAAf,eACA,2BAAOxN,GAAG,kBAAkB4K,KAAK,OAAOzK,KAAK,QAAQ4J,SAAUyI,EAAWlK,MAAOiK,EAAQ1O,IAAI,WAC7F,4BAAQ+G,KAAK,SAAS7L,QAAS,SAAA+B,GAAE,OAAE,EAAKpB,MAAMqT,YAAYjS,IAAKX,KAAK,QAAQrB,UAAU,gBAAtF,MAEJ,yBAAKA,UAAU,YACX,2BAAO0O,QAAQ,iBAAf,gBACA,2BAAOxN,GAAG,gBAAgB4K,KAAK,OAAOzK,KAAK,SAAS4J,SAAUyI,EAAWlK,MAAOiK,EAAQ1O,IAAI,YAC5F,4BAAQ+G,KAAK,SAAS7L,QAAS,SAAA+B,GAAE,OAAE,EAAKpB,MAAMqT,YAAYjS,IAAKX,KAAK,SAASrB,UAAU,gBAAvF,MAEJ,yBAAKA,UAAU,YACX,2BAAO0O,QAAQ,gBAAf,eACA,2BAAOxN,GAAG,eAAe4K,KAAK,OAAOzK,KAAK,SAAS4J,SAAUyI,EAAWlK,MAAOiK,EAAQ1O,IAAI,YAC3F,4BAAQ+G,KAAK,SAAS7L,QAAS,SAAA+B,GAAE,OAAE,EAAKpB,MAAMqT,YAAYjS,IAAKX,KAAK,SAASrB,UAAU,gBAAvF,MAEJ,yBAAKA,UAAU,YACX,2BAAO0O,QAAQ,oBAAf,eACA,4BAAQxN,GAAG,mBAAmBG,KAAK,aAAa4J,SAAUyI,EAAWlK,MAAOiK,EAAQ1O,IAAI,eACpF,4BAAQyE,MAAM,IAAd,aACCsK,IAAkB,GAEvB,4BAAQhI,KAAK,SAAS7L,QAAS,SAAA+B,GAAE,OAAE,EAAKpB,MAAMqT,YAAYjS,IAAKX,KAAK,aAAarB,UAAU,gBAA3F,MAEJ,yBAAKA,UAAU,YACX,2BAAO0O,QAAQ,gBAAf,WACA,4BAAQxN,GAAG,eAAeG,KAAK,SAAS4J,SAAUyI,EAAWlK,MAAOiK,EAAQ1O,IAAI,WAC5E,4BAAQyE,MAAM,IAAd,aACCqK,IAAY,GAEjB,4BAAQ/H,KAAK,SAAS7L,QAAS,SAAA+B,GAAE,OAAE,EAAKpB,MAAMqT,YAAYjS,IAAKX,KAAK,SAASrB,UAAU,gBAAvF,MAEJ,4BAAQ8L,KAAK,SAAS7L,QAAS,SAAA+B,GAAE,OAAE,EAAKpB,MAAMqT,YAAYjS,IAAKX,KAAK,MAAMrB,UAAU,oBAApF,mB,GA1EES,IAAMC,YCJtBwT,G,kHA2D6BC,EAAUC,GACrC,IAAIC,GAAS,EACb,IAAK,IAAMvS,KAAOqS,EAAU,CAE1B,IAAKA,EAASG,eAAexS,KAASsS,EAAcE,eAAexS,GACjE,OAAO,EAOT,GAJ6B,kBAAlBqS,EAASrS,IAAqByL,OAAOgH,KAAKJ,EAASrS,IAAMD,SAClEwS,EAAStU,KAAKyU,qBAAqBL,EAASrS,GAAMsS,EAActS,MAG9DuS,EAAQ,MAGd,OAAOA,I,gCAGQI,GAEf,GAAIA,EAAM,MAAM,IAAInR,MAAM,sBAE1B,MAAO,aAAemR,EAAK3I,S,KAjF7BoI,GAEKQ,wBAA0B,CAC7BC,QAAS,CACPC,MAAO,CACLC,KAAM,IAERC,UAAW,CACTC,SAAU,IAEZC,YAAa,KAVjBd,GAcOe,qBAAuB,CAC5BC,IAAK,CACHC,MAAO,IAETC,KAAK,CACHD,MAAO,IAETE,MAAO,CACLF,MAAO,IAETG,OAAO,CACLH,MAAO,IAETI,cAAc,CACZJ,MAAO,IAETK,aAAa,CACXL,MAAO,IAETM,gBAAgB,CACdN,MAAO,KAlCXjB,GAsCOwB,yBAA2B,CAChCR,IAAK,CACHC,MAAO,IAETC,KAAM,CACJD,MAAO,KA3CXjB,GA+COyB,2BAA6B,CAClCC,QAAS,CACPT,MAAO,IAETU,YAAa,CACXV,MAAO,IAETW,KAAM,CACJX,MAAO,KA+BFjB,UC1EE6B,G,YAXb,aAAwB,IAAD,mDAAR/O,EAAQ,yBAARA,EAAQ,uBAErB,iEAASA,KAGL1D,MAAM2D,mBACR3D,MAAM2D,kBAAN,eAA8B8O,GANX,E,uCADMzS,QC87B3B0S,GAAW,SAACvB,EAAMwB,GACpB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAAA5G,GACZA,EAAMjG,OAAO8K,QAAU4B,EAAkBzG,EAAMjG,OAAO8K,SAG1DI,GAAQyB,EAAOG,WAAW5B,IAY9B,IAAM6B,GAAyB,SAAC7R,EAAO5B,EAAW/B,GAkB9C,OAjBA2D,EAAQA,EAAMlC,KAAI,SAAA1B,GAEd,IAAM0V,EAAgBzV,EACjB6D,QAAO,SAAAZ,GAAU,OAAIA,EAAWI,SAAWtD,EAAKK,IAAM6C,EAAWyS,YAAc,KAC/EjU,KAAI,SAAAwB,GACD,IAAM0S,EAAmB,GAGzB,OAFAA,EAAiBpU,SAAWQ,EAAU8C,MAAK,SAAAtD,GAAQ,OAAIA,EAASnB,KAAO6C,EAAWyS,cAClFC,EAAiB3I,KAAO/J,EAAW+J,KAC5B2I,KAOf,OAFA5V,EAAKC,YAAcyV,EAEZ1V,MAKT6V,GAAiB,SAAjBA,EAAkBjS,EAAOtD,GAAyC,IAA1BE,EAAyB,uDAAlB,GAAIsV,EAAc,uDAAN,EAE7DA,IAEA,IAAMC,EAAenS,EAAMkB,MAAK,SAAA9E,GAAI,OAAIA,EAAKM,gBAAkBA,KAEzD0V,EAAWpS,EAAME,QAAO,SAAAmS,GAAO,OAAIA,EAAQ3V,cAAc4V,WAAWH,EAAazV,gBAAkB2V,EAAQ1V,eAAiBuV,KAC7HpU,KAAI,SAAAuU,GAED,OADAJ,EAAejS,EAAOqS,EAAQ3V,cAAhB,sBAAmCE,GAAnC,CAAyCuV,EAAavV,OAAOsV,GACpEG,KAGfF,EAAahS,SAAWiS,EAAShV,OACjC+U,EAAatV,YAAb,sBAAsDD,GAAtD,CAA4DuV,EAAavV,QAKvE2V,GAAkB,SAACC,GAErB,IAAKA,EAAU,MAAM,IAAI3T,MAAM,0BAC/B,IAAMwK,EAAO,GAMb,OAJAA,EAAKC,MAAQ7F,SAAS+O,EAASzR,MAAM,MAAM,GAAGA,MAAM,KAAK,IACzDsI,EAAKE,QAAU9F,SAAS+O,EAASzR,MAAM,KAAK,GAAGA,MAAM,KAAK,IAC1DsI,EAAKG,QAAU/F,SAAS+O,EAASzR,MAAM,KAAK,GAAGA,MAAM,KAAK,IAEnDsI,GA2PIoJ,G,2MAvPXxX,MAAQ,CACJ+U,KAAM,KACNhQ,MAAO,GACPE,OAAQ,IAAIwS,K,EAGhBC,aAAe,CACXC,MAAO,QACPC,YAAa,cACbC,KAAM,Q,EAGVtE,WAAa,SAAAjR,GAET,IAAKA,EAAGuH,OAAOiO,MAAO,MAAM,IAAIC,UAAU,2BAC1C,IAAKzV,EAAGuH,OAAOiO,MAAM3V,OAAQ,OAAO4L,MAAM,qBAE1C,IAAMgH,EAAOzS,EAAGuH,OAAOiO,MAAM,GAE7B,IAhFR,SAAmB/C,GAGf,IAAwCA,EAAM,MAAM,IAAInR,MAAM,sBAE9D,MAAO,aAA4CmR,EAAK3I,KA2E/C4L,CAAUjD,GAAO,OAAOhH,MAAM,kEAEnC,EAAK5N,SAAS,CAAC4U,SACfuB,GAASvB,EAAM,EAAKkD,kB,EAGxBC,cAAgB,SAACC,GAEb,OAAKA,EACU,KAAXA,EAAuB,EAAKT,aAAaG,KAEtC,EAAKH,aAAaE,YAHJ,EAAKF,aAAaC,O,EAM3CM,gBAAkB,SAAAG,GACd,IAAMC,EAAUC,EAAQ,IACxB,IACI,IAAMC,EAAgBF,EAAQG,OAAOJ,EAAS,CAC1CK,SAAS,EACTC,OAAQ,IAGZ,IAAKlE,GAAmBM,qBAAqBN,GAAmBQ,wBAAyBuD,GAAgB,MAAM,IAAIlC,GAAmB,wDANtI,MAYIkC,EAActD,QAHAlQ,EATlB,EASImQ,MAAQC,KACchS,EAV1B,EAUIiS,UAAYC,SACcjU,EAX9B,EAWIkU,YAAcqD,WAKlB5T,GAFAA,EAAQ6T,MAAMC,QAAQ9T,GAASA,EAAQ,CAACA,IAE1BE,QAAO,SAAA9D,GAAI,OAAIqT,GAAmBM,qBAAqBN,GAAmBe,qBAAsBpU,IAA4B,MAAnBA,EAAKqU,IAAIC,SAC3H5S,KAAI,SAAA1B,GAAI,MAAK,CACVK,GAAIgH,SAASrH,EAAKqU,IAAIC,OACtB9T,KAAMR,EAAKuU,KAAKD,MAChBpU,MAAOmG,EAAU6D,gBAAgBlK,EAAKwU,MAAMF,OAC5CnU,OAAQkG,EAAU6D,gBAAgBlK,EAAKyU,OAAOH,OAC9ClU,OAAQ,EAAK2W,cAAc1P,SAASrH,EAAK4U,gBAAgBN,QACzDhU,cAAeN,EAAK0U,cAAcJ,MAClC/T,aAAc8G,SAASrH,EAAK2U,aAAaL,OACzCqD,cAAetQ,SAASrH,EAAK0U,cAAcJ,MAAM3P,MAAM,KAAK,IAC5D8F,gBAAiBpD,SAASrH,EAAK4U,gBAAgBN,OAC/C5J,UAAU,MAIlB1I,GADAA,EAAYyV,MAAMC,QAAQ1V,GAAaA,EAAY,CAACA,IAE/C8B,QAAO,SAAAtC,GAAQ,OAAI6R,GAAmBM,qBAAqBN,GAAmBwB,yBAA0BrT,MACxGE,KAAI,SAAAF,GAAQ,MAAK,CACdnB,GAAIgH,SAAS7F,EAAS6S,IAAIC,OAC1B9T,KAAMgB,EAAS+S,KAAKD,MACpBnR,WAAY3B,EAASoW,MAAQpW,EAASoW,MAAMtD,MAAQ,OAG5DrU,EAAcA,GAAe,GAE7BA,GADAA,EAAcwX,MAAMC,QAAQzX,GAAeA,EAAc,CAACA,IAErD6D,QAAO,SAAAZ,GAAU,OAAImQ,GAAmBM,qBAAqBN,GAAmByB,2BAA4B5R,MAC5GxB,KAAI,SAAAwB,GAAU,MAAK,CAChBI,OAAQ+D,SAASnE,EAAW6R,QAAQT,OACpCqB,WAAYtO,SAASnE,EAAW8R,YAAYV,OAC5CrH,KAAMkJ,GAAgBjT,EAAW+R,KAAKX,YAG9C1Q,EAAQ6R,GAAuB7R,EAAO5B,EAAW/B,IAE3C6D,QAAO,SAAA9D,GAAI,OAA0B,IAAtBA,EAAKO,gBACrBuO,SAAQ,SAAA9O,GAAI,OAAI6V,GAAejS,EAAO5D,EAAKM,kBAEhD,EAAKtB,UAAS,WACV,MAAO,CACH4E,QACA5B,gBAGV,MAAO6V,GACLjL,MAAMiL,EAAMC,SACZlL,MAAMiL,EAAMrX,MACZuX,QAAQC,IAAIH,EAAMI,S,EAI1BC,aAAe,SAAA/W,GAAO,IAAD,EAEKA,EAAGuH,OAAlBlI,EAFU,EAEVA,KAAMmI,EAFI,EAEJA,MAEb,EAAK3J,UAAS,SAAAgK,GAAc,IACjBlF,EAAUkF,EAAVlF,OAGP,OAFAA,EAAOqU,IAAI3X,EAAMmI,GAEV,CAAC7E,c,EAIhBsP,YAAc,SAAAjS,GAAO,IAEVX,EAAQW,EAAGuH,OAAXlI,KAEM,QAATA,EACA,EAAKxB,UAAS,SAAAgK,GAAc,IACjBlF,EAAUkF,EAAVlF,OAGP,OAFAA,EAAOqU,IAAI3X,EAAM,IAEV,CAACsD,aAGZ,EAAKsU,qB,EASblK,gBAAkB,SAACmK,GAEf,IAAMxU,EAAc,IAAItB,EAFM,EAGN,EAAK1D,MAAtBiF,EAHuB,EAGvBA,OAAQF,EAHe,EAGfA,MAEf,IAAIA,EAAM5C,OAAQ,OAAO4L,MAAM,oDAE/B,IAAM5M,EAAOqY,EAAczU,EAAME,QAAO,SAAA9D,GAAI,OAAIA,EAAKS,aAAeoD,EAAYG,QAAQhE,GACnFiE,UAAUH,EAAOI,IAAI,SACrBC,oBAAoBL,EAAOI,IAAI,WAC/BE,mBAAmBN,EAAOI,IAAI,UAC9BG,gBAAgBP,EAAOI,IAAI,eAC3BI,eAAeR,EAAOI,IAAI,WAC1BK,YAAYT,EAAOI,IAAI,WACvBM,eAAe,EAAK3F,MAAM+E,MAIzB4P,EAFU2D,EAAQ,IAEDmB,OAAO,CAAC1U,MAAM,CAAC5D,SADtB,CAACsX,SAAS,EAAMiB,eAAe,EAAMhB,OAAQ,IAGvDiB,EAAU,IAAIC,KAAK,CAACjF,GAAS,CAACvI,KAAK,aAEzC,GAAGyD,OAAOgK,UAAUC,iBAChBjK,OAAOgK,UAAUC,iBAAiBH,EAAS,EAAK3Z,MAAM+U,KAAKpT,UAC1D,CACD,IAAMoY,EAAMlK,OAAOmK,IAAIC,gBAAgBN,GAEjCO,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAON,EACTG,EAAEI,SAAW,EAAKta,MAAM+U,KAAKpT,KAC7BuY,EAAEtG,QACF2G,YAAW,kBAAM1K,OAAOmK,IAAIQ,gBAAgBT,KAAM,K,EAI1DpM,WAAa,SAAA8M,GAET,EAAKta,UAAS,SAAAgK,GAAc,IAEjBpF,EAASoF,EAATpF,MASP,OAPI0V,GAAeA,EAAYjZ,IAAIuD,EAAMkL,SAAQ,SAAA9O,GACzCA,EAAKK,KAAOiZ,EAAYjZ,KACxBqM,OAAOC,OAAO3M,EAAMsZ,GACpBtZ,EAAKI,OAAS,EAAK2W,cAAc/W,EAAKyK,qBAIvC,CAAC7G,a,EAWhBwU,kBAAoB,WAChB,EAAKpZ,UAAS,SAAAgK,GAAc,IACjBlF,EAAUkF,EAAVlF,OAQP,OAPAA,EAAOqU,IAAI,OAAQ,IACnBrU,EAAOqU,IAAI,SAAU,IACrBrU,EAAOqU,IAAI,QAAS,IACpBrU,EAAOqU,IAAI,SAAU,IACrBrU,EAAOqU,IAAI,aAAc,IACzBrU,EAAOqU,IAAI,SAAU,IAEd,CAACrU,c,oFA1EK,IACZ4M,EAAW6I,KAAKzW,MA5nCX,+x0BA4nCL4N,QACLxR,KAAKF,SAAS,CAACyR,SAAUC,M,0CA2DzBxR,KAAKkZ,sB,+BAiBC,IAAD,SAEmBlZ,KAAKL,MAAtBiF,EAFF,EAEEA,OAAQF,EAFV,EAEUA,MAEf,OACI,kBAAC,IAAD,CAAQ4V,SAAUC,iBACd,oCACI,gCACI,kBAAC,GAAD,CAAQrH,WAAYlT,KAAKkT,WAAY5R,KAAMtB,KAAKL,MAAM+U,KAAO1U,KAAKL,MAAM+U,KAAKpT,KAAO,KAC5E2R,SAAUjT,KAAKL,MAAMsT,YAEjC,8BACI,6BAAShT,UAAU,eACf,kBAAC,IAAD,CAAO2S,KAAM,CAAC,UAAU,SAAS,SAAUE,OAAQ,kBACnD,kBAAC,GAAD,CACIa,UAAW,EAAKqF,aAChBlW,UAAW,EAAKnD,MAAMmD,UACtBoR,YAAa,EAAKA,YAClBR,QAAS,EAAK/T,MAAMiF,OACpBgP,aAAc,EAAKyD,kBAGvB,kBAAC,GAAD,CAAW3S,MAAOA,EACP5B,UAAW9C,KAAKL,MAAMmD,UACtBwK,WAAYtN,KAAKsN,WACjBhM,KAAMtB,KAAKL,MAAM+U,KAAO1U,KAAKL,MAAM+U,KAAKpT,KAAO,KAC/C0N,gBAAiBhP,KAAKgP,gBACtBuC,SAAUvR,KAAKL,MAAM4R,SACrB3M,OAAQA,KAGvB,kBAAC,EAAD,a,GAhPNlE,IAAMC,WCx/BJ6Z,QACW,cAA7BhL,OAAOiL,SAASC,UAEe,UAA7BlL,OAAOiL,SAASC,UAEhBlL,OAAOiL,SAASC,SAASC,MACvB,2DCZNC,IAAS9H,OAAO,kBAAC,GAAD,MAASgH,SAASe,eAAe,SD2H3C,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,mB","file":"static/js/main.5ea3c1c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.c317b9c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.209f1cd7.svg\";","module.exports = __webpack_public_path__ + \"static/media/prevArrow.1304fdac.svg\";","module.exports = __webpack_public_path__ + \"static/media/forwArrow.2de0905b.svg\";","module.exports = __webpack_public_path__ + \"static/media/main.9f46ca12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/duration.4687d6cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/toDo.fdc1b07c.svg\";","module.exports = __webpack_public_path__ + \"static/media/inProgress.33699397.svg\";","module.exports = __webpack_public_path__ + \"static/media/done.32ea9380.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.bc67068e.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.71cfd92a.svg\";","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport Arrow from \"../images/arrow.svg\";\r\nimport './ChartNav.css';\r\n\r\nclass ChartNav extends React.Component {\r\n    state = {\r\n        isExtended: false\r\n    };\r\n\r\n    handleClickButton = () => {\r\n        const isExtended = !this.state.isExtended;\r\n        this.setState({isExtended});\r\n    };\r\n\r\n    render() {\r\n        const angleNavArrow = this.state.isExtended ? 90 : 270;\r\n\r\n        return (\r\n            <aside className=\"chartNav\">\r\n\r\n                <button onClick={this.handleClickButton}>\r\n                    <img\r\n                        src={Arrow}\r\n                        alt=\"\"\r\n                        style={{transform: `rotate(${angleNavArrow}deg)`}}\r\n                    />\r\n                </button>\r\n\r\n                <nav style={{width: this.state.isExtended ? \"200px\" : \"0px\"}}>\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink className=\"navElement\" to=\"/kanban\"><p>kanban</p></NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink className=\"navElement\" to=\"/list\"><p>task list</p></NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink className=\"navElement\" to=\"/gantt\"><p>gantt</p></NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink className=\"navElement\" to=\"/holidays\"><p>holidays</p></NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartNav;\r\n","import React from \"react\";\r\nimport \"./KanbanTail.css\";\r\nimport User from \"../../images/user.svg\";\r\n\r\nconst getBorderStyle = status =>{\r\n\r\n  let statusColor = null\r\n    \r\n  switch (status) {\r\n  case \"done\":\r\n      statusColor = \"rgb(114, 161, 118)\";\r\n      break;\r\n  case \"to do\":\r\n      statusColor = \"rgb(138, 60, 60)\";\r\n      break;\r\n  case \"in progress\":\r\n      statusColor = \"rgb(218, 206, 144)\";\r\n      break;\r\n  default:\r\n      statusColor = \"transparent\";\r\n  }\r\n\r\n   return {borderLeft: `solid ${statusColor} 10px`};\r\n\r\n}\r\n\r\nconst KanbanTail = props => {\r\n  const {assignments, start, finish, status, id, outlineNumber, outlineLevel, name} = props.task;\r\n\r\n  const complexName = outlineLevel > 1 ? [...props.taskNameGenerator(outlineNumber), name] : [name];\r\n\r\n  const borderStyle = getBorderStyle(status);\r\n\r\n\r\n    const taskOwners = assignments.length ? (\r\n        <div key={assignments[0].id} className=\"taskOwner\" onMouseOver={ev => props.activateToolTip(ev, id)} onMouseOut={props.disactivateToolTip}>\r\n            <img src={User} alt=\"\" /> <p>{assignments[0].resource.name}</p> {assignments.length > 1 && (<p> ...</p>)}\r\n        </div>) : (<p>-</p>);\r\n\r\n  const taskName = complexName.map((name, index) => (<p key={index}>{name}</p>));\r\n\r\n  return (\r\n    <div className=\"kanbanTail\" style={borderStyle}>\r\n      <h5>{taskName}</h5>\r\n      <div>{taskOwners}</div>\r\n      <div>\r\n        <p>\r\n          Start Date:{\" \"}\r\n          {start}\r\n        </p>\r\n        <p>\r\n          Deadline:{\" \"}\r\n          {finish}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanTail;\r\n","import React from \"react\";\r\nimport KanbanTail from './KanbanTail';\r\nimport './KanbanBox.css';\r\n\r\nconst KanbanBox = (props) => {\r\n\r\n  const kanbanTails = props.kanbanTasks.map(task => <KanbanTail key={task.id} task={task} activateToolTip={props.activateToolTip} disactivateToolTip={props.disactivateToolTip} taskNameGenerator={props.taskNameGenerator}/>);\r\n\r\n  return (\r\n    <div className=\"kanbanBox\">\r\n      <div className=\"headerKanban\">\r\n          <h3 className=\"\">{props.name}</h3>\r\n          <p className=\"tailCounter\">{kanbanTails.length}</p>\r\n      </div>\r\n      <div className=\"kanbanList\">\r\n        {kanbanTails}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBox;\r\n","import React from 'react';\r\nimport User from \"../images/user.svg\";\r\nimport \"./ToolTipResource.css\";\r\n\r\nconst ToolTipResource = props => {\r\nconst {resources} = props;\r\n\r\n    const taskOwners = resources.slice(1, resources.length).map(resource => (\r\n        <>\r\n        <div className=\"resourceElement\" key={resource.resource.id}>\r\n          <img src={User} alt=\"\" /> <p>{resource.resource.name}</p>\r\n        </div>\r\n        </>\r\n      ));\r\n    \r\n      const position = {\r\n        top: props.yPosition,\r\n        left: props.xPosition,\r\n\r\n      }\r\n\r\n    return ( <div style={position} className=\"toolTipResource\">\r\n    {taskOwners}\r\n    </div> );\r\n}\r\n \r\nexport default ToolTipResource;\r\n","class PowerFilter {\r\n\r\n    #task;\r\n    #containName;\r\n    #isTaskOwner;\r\n    #isAfterDate;\r\n    #isBeforeDate;\r\n    #isStatus;\r\n    #isDepartment;\r\n\r\n\r\n    constructor() {\r\n        this.#task = null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param task\r\n     * @returns {PowerFilter}\r\n     */\r\n    setTask(task){\r\n        this.#task = task;\r\n\r\n        this.#containName = true;\r\n        this.#isTaskOwner = true;\r\n        this.#isAfterDate = true;\r\n        this.#isBeforeDate = true;\r\n        this.#isStatus = true;\r\n        this.#isDepartment = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param keyword\r\n     * @returns {PowerFilter}\r\n     */\r\n    checkName(keyword){\r\n\r\n        if(!this.#task) throw new Error(\"No task provided!\");\r\n\r\n        this.#containName = !keyword || this.#task.name.toUpperCase().includes(keyword.toUpperCase());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param startDate\r\n     * @returns {PowerFilter}\r\n     */\r\n    checkTaskAfterDate(startDate){\r\n        if(!this.#task) throw new Error(\"No task provided!\");\r\n\r\n        this.#isAfterDate = !startDate\r\n            || Date.parse(this.#task.start) >= Date.parse(startDate)\r\n            || Date.parse(this.#task.finish) >= Date.parse(startDate);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param finishDate\r\n     * @returns {PowerFilter}\r\n     */\r\n    checkTaskBeforeDate(finishDate){\r\n        if(!this.#task) throw new Error(\"No task provided!\");\r\n\r\n        this.#isBeforeDate = !finishDate\r\n            || Date.parse(this.#task.start) <= Date.parse(finishDate)\r\n            || Date.parse(this.#task.finish) <= Date.parse(finishDate);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param taskOwner\r\n     * @returns {PowerFilter}\r\n     */\r\n    checkTaskOwner(taskOwner){\r\n        if(!this.#task) throw new Error(\"No task provided!\");\r\n\r\n        this.#isTaskOwner = !taskOwner\r\n            || (this.#task.assignments\r\n                && this.#task.assignments.findIndex(assignment => assignment.resource\r\n                    && assignment.resource.name\r\n                    && assignment.resource.name.toUpperCase().includes(taskOwner.toUpperCase()))+1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param department\r\n     * @returns {PowerFilter}\r\n     */\r\n    checkDepartment(department){\r\n\r\n        if(!this.#task) throw new Error(\"No task provided!\");\r\n\r\n        this.#isDepartment = !department\r\n            || (this.#task.assignments\r\n                && this.#task.assignments.findIndex(assignment => assignment.resource\r\n                    && assignment.resource.department\r\n                    && assignment.resource.department.toUpperCase().includes(department.toUpperCase()))+1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param status\r\n     * @returns {PowerFilter}\r\n     */\r\n    checkStatus(status){\r\n\r\n        if(!this.#task) throw new Error(\"No task provided!\");\r\n\r\n        this.#isStatus = !status || this.#task.status.toUpperCase().includes(status.toUpperCase());\r\n\r\n        return this\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    filterAll(){\r\n\r\n        if(!this.#task) throw new Error(\"No task provided!\");\r\n\r\n        return this.#containName && this.#isStatus && this.#isBeforeDate\r\n            && this.#isAfterDate && this.#isTaskOwner && this.#isDepartment;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default PowerFilter;\r\n","import React from \"react\";\r\nimport KanbanBox from \"./KanbanBox\";\r\nimport './KanbanBoard.css';\r\nimport ToolTipResource from '../../Components/ToolTipResource';\r\nimport PowerFilter from \"../../Service/PowerFilter\";\r\n\r\n\r\nclass KanbanBoard extends React.Component {\r\n\r\n    state = {\r\n        resourceInfo: null,\r\n    }\r\n\r\n    activateToolTip = (ev, taskId) => {\r\n        const {clientY, clientX} = ev;\r\n\r\n        this.setState({\r\n            resourceInfo: {\r\n                taskId: taskId,\r\n                positionX: clientX,\r\n                positionY: clientY\r\n            }\r\n        })\r\n    }\r\n\r\n    disactivateToolTip = () => {\r\n\r\n        this.setState({\r\n            resourceInfo: null,\r\n        })\r\n    }\r\n\r\n    primaryFilter = (tasks) => {\r\n        const powerFilter = new PowerFilter();\r\n        const {filter} = this.props;\r\n\r\n        return tasks.filter(task => task.isFinal && powerFilter.setTask(task)\r\n            .checkName(filter.get(\"name\"))\r\n            .checkTaskBeforeDate(filter.get(\"finish\"))\r\n            .checkTaskAfterDate(filter.get(\"start\"))\r\n            .checkDepartment(filter.get(\"department\"))\r\n            .checkTaskOwner(filter.get(\"person\"))\r\n            .checkStatus(filter.get(\"status\"))\r\n            .filterAll()\r\n        );\r\n    }\r\n\r\n    getSuperTaskName = outlineNumber => {\r\n\r\n        let complexName = [];\r\n\r\n        const splitNo = outlineNumber.split(\".\");\r\n\r\n        const searchedNo = splitNo.slice(0, splitNo.length - 1).join(\".\");\r\n\r\n        const task = this.props.tasks.find(task => task.outlineNumber === searchedNo);\r\n\r\n        if (task.outlineLevel > 1) {\r\n            complexName = [...this.getSuperTaskName(task.outlineNumber)];\r\n        }\r\n\r\n        return [...complexName, task.name];\r\n\r\n    }\r\n\r\n    render() {\r\n        let resources = [];\r\n        let tasksToDo = null;\r\n        let tasksInProgress = null;\r\n        let tasksDone = null;\r\n        const {tasks} = this.props;\r\n        if (tasks.length) {\r\n\r\n            const filteredTasks = this.primaryFilter(tasks);\r\n\r\n            tasksToDo = filteredTasks.filter(task => task.status === \"to do\");\r\n            tasksInProgress = filteredTasks.filter(task => task.status === \"in progress\");\r\n            tasksDone = filteredTasks.filter(task => task.status === \"done\");\r\n\r\n            if (this.state.resourceInfo) {\r\n                const activeTaskIndex = this.props.tasks.findIndex(task => task.id === this.state.resourceInfo.taskId);\r\n                resources = this.props.tasks[activeTaskIndex].assignments;\r\n            }\r\n\r\n        }\r\n        return tasks.length > 0 && (<div className=\"kanbanBoard\">\r\n\r\n            <KanbanBox name=\"to do\" kanbanTasks={tasksToDo} activateToolTip={this.activateToolTip}\r\n                       disactivateToolTip={this.disactivateToolTip} taskNameGenerator={this.getSuperTaskName}/>\r\n\r\n            <KanbanBox name=\"in progress\" kanbanTasks={tasksInProgress} activateToolTip={this.activateToolTip}\r\n                       disactivateToolTip={this.disactivateToolTip} taskNameGenerator={this.getSuperTaskName}/>\r\n\r\n            <KanbanBox name=\"done\" kanbanTasks={tasksDone} activateToolTip={this.activateToolTip}\r\n                       disactivateToolTip={this.disactivateToolTip} taskNameGenerator={this.getSuperTaskName}/>\r\n\r\n            {resources.length > 1 ?\r\n                <ToolTipResource id=\"toolTip\" resources={resources} xPosition={this.state.resourceInfo.positionX}\r\n                                 yPosition={this.state.resourceInfo.positionY}/> : null}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default KanbanBoard;\r\n","import React from 'react';\r\nimport './GanttTask.css';\r\n\r\nconst GanttTask = props => {\r\n\r\n const {x, y, width, fullName} = props.task;\r\n const {taskHeight, innerGapSize, taskDescriptionSize, xOffset, yOffset} = props.ganttConfig;\r\n\r\n const yText = y + taskHeight + innerGapSize + 12;\r\n const xText = x + 5;\r\n\r\n\r\n    return(\r\n        <>\r\n            <rect className=\"gantTask\" x={x + xOffset} y={y + yOffset} width={width} height={taskHeight}/>\r\n            <text className=\"gantTaskDescription\" y={yText + yOffset} x={xText + xOffset} width=\"auto\" fontSize={taskDescriptionSize}>{fullName}</text>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default GanttTask;\r\n","class IncorrectDateError extends Error {\r\n    constructor(...params) {\r\n        // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n        super(...params);\r\n\r\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, IncorrectDateError);\r\n        }\r\n    }\r\n\r\n}\r\nexport default IncorrectDateError;\r\n","import IncorrectDateError from \"../Errors/IncorrectDateError\";\r\n\r\nclass PowerDate{\r\n    \r\n    /**\r\n     * \r\n     * @param {*} tasks \r\n     */\r\n    static getMinTaskTimeValue (tasks) {\r\n        return tasks.length && tasks.map(task => task.start)\r\n            .map(date => this.localDateToMilliseconds(date))\r\n            .reduce((firstDate, secondDate) => firstDate < secondDate ? firstDate : secondDate);\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} tasks \r\n     */\r\n    static getMaxTaskTimeValue (tasks) {\r\n        return tasks.length && tasks.map(task => task.finish)\r\n            .map(date => this.localDateToMilliseconds(date))\r\n            .reduce((firstDate, secondDate) => firstDate > secondDate ? firstDate : secondDate);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} stringDate \r\n     */\r\n    static localDateToMilliseconds (stringDate) {\r\n        const formatedDete = stringDate.split(\".\").reverse().join(\"/\");\r\n        return Date.parse(formatedDete);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param date\r\n     * @returns {string}\r\n     */\r\n    static getSimplifyDate (date) {\r\n        const dateObject = new Date(date);\r\n        return dateObject.toISOString().substring(0,10);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param date\r\n     * @returns {string}\r\n     */\r\n    static getLocalDate (date) {\r\n        const dateObject = new Date(date);\r\n        return dateObject.toLocaleDateString();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param dates\r\n     * @returns {*}\r\n     */\r\n    static getMinYearFromDates(dates){\r\n        return dates.map(dateString => {\r\n            let date = new Date(dateString);\r\n            if(isNaN(date.getTime())) throw new IncorrectDateError(\"Incorrect date format\");\r\n            return parseInt(date.getFullYear());\r\n        }).reduce((first,second) => first > second ? second : first);\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param dates\r\n     * @returns {*}\r\n     */\r\n    static getMaxYearFromDates(dates){\r\n        return dates.map(dateString => {\r\n            let date = new Date(dateString);\r\n            if(isNaN(date.getTime())) throw new IncorrectDateError(\"Incorrect date format\");\r\n            return parseInt(date.getFullYear());\r\n        }).reduce((first,second) => first < second ? second : first);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default PowerDate;\r\n","import React from 'react';\r\nimport \"./GanttChart.css\";\r\nimport GanttTask from \"./GanttTask\";\r\nimport PowerDate from \"../../Service/PowerDate\";\r\nimport PowerFilter from \"../../Service/PowerFilter\";\r\n\r\nconst ganttTaskFacotry = (task, minTimeValue, resolution, ordinalNo, taskInterval, taskNameFactory) => {\r\n\r\n    const {start, finish, outlineLevel, outlineNumber, name} = task;\r\n\r\n    const complexName = outlineLevel > 1 ? [...taskNameFactory(outlineNumber), name] : [name];\r\n\r\n    const y = ordinalNo ? ordinalNo * taskInterval : ordinalNo;\r\n\r\n    let width = PowerDate.localDateToMilliseconds(finish) * resolution - PowerDate.localDateToMilliseconds(start) * resolution;\r\n    width = width || 1;\r\n\r\n    const x = (PowerDate.localDateToMilliseconds(task.start) - minTimeValue) * resolution;\r\n\r\n    const fullName = complexName.join(\" / \");\r\n\r\n    return {x, y, width, fullName}\r\n}\r\n\r\nconst convertToGantTasks = (tasks, ganttConfig, taskNameGenerator) => {\r\n\r\n    const maxTimeValue = PowerDate.getMaxTaskTimeValue(tasks);\r\n\r\n    const minTimeValue = PowerDate.getMinTaskTimeValue(tasks);\r\n\r\n    const taskInterval = ganttConfig.taskHeight + ganttConfig.taskDescriptionSize + ganttConfig.gapSize + ganttConfig.innerGapSize;\r\n\r\n    const ganttTasks = tasks.filter(task => task.isFinal)\r\n        .map((task, index) => ganttTaskFacotry(task, minTimeValue, /*ganttResolution*/ ganttConfig.resolution, index, taskInterval, taskNameGenerator));\r\n\r\n    return ganttTasks;\r\n\r\n}\r\n\r\nconst drawCanvaGrid = (ganttConfig, minTimeValue, maxTimeValue) => {\r\n    const {daysGrid, ganttCanvaWidth, xOffset} = ganttConfig;\r\n\r\n    const DAILY_MILLISECONDS = 86400000;\r\n    const increaseIndex = DAILY_MILLISECONDS * daysGrid * 2;\r\n\r\n    let gridComponents = [minTimeValue];\r\n    const iteratorTerminator = maxTimeValue - DAILY_MILLISECONDS * daysGrid * 2;\r\n\r\n    for (let i = minTimeValue; i <= iteratorTerminator; i += increaseIndex) {\r\n        gridComponents.push(i + increaseIndex);\r\n    }\r\n\r\n    const ganttResolution = (ganttCanvaWidth + 200) / (maxTimeValue - minTimeValue);\r\n\r\n    return gridComponents.map(timePoint => (\r\n        <rect className=\"gantGrid\" x={((timePoint - minTimeValue) * ganttResolution)+xOffset} y=\"0\"\r\n              width={DAILY_MILLISECONDS * daysGrid * ganttResolution} height=\"100%\"/>));\r\n\r\n}\r\n\r\nconst getGridDates = (ganttConfig, minTimeValue, maxTimeValue) => {\r\n    const {daysGrid, ganttCanvaWidth, xOffset, gridDatesSize} = ganttConfig;\r\n\r\n    const DAILY_MILLISECONDS = 86400000;\r\n    const increaseIndex = DAILY_MILLISECONDS * daysGrid;\r\n\r\n    let gridDates = [minTimeValue];\r\n    const iteratorTerminator = maxTimeValue - DAILY_MILLISECONDS * daysGrid;\r\n\r\n    for (let i = minTimeValue; i <= iteratorTerminator; i += increaseIndex) {\r\n        gridDates.push(i + increaseIndex);\r\n    }\r\n\r\n    const ganttResolution = (ganttCanvaWidth + 200) / (maxTimeValue - minTimeValue);\r\n\r\n\r\n    return gridDates.map((timePoint, index) => (\r\n        <text className=\"gantGrid-date\" x={((timePoint - minTimeValue) * ganttResolution)+xOffset} y=\"10\"\r\n    width=\"auto\" fontSize={gridDatesSize}>{PowerDate.getSimplifyDate(timePoint)}</text>));\r\n\r\n}\r\n\r\nconst setGanttNominalWidth = tasks =>{\r\n\r\n    const FOUR_MONTHS = 10368000000;\r\n    const GROWTH_INDEX = 1800 / FOUR_MONTHS;\r\n\r\n    const maxTimeValue = PowerDate.getMaxTaskTimeValue(tasks);\r\n    const minTimeValue = PowerDate.getMinTaskTimeValue(tasks);\r\n\r\n    const duration = maxTimeValue - minTimeValue;\r\n\r\n    return duration <= FOUR_MONTHS ? 1800 : 1800 + (duration - FOUR_MONTHS) * GROWTH_INDEX;\r\n\r\n}\r\n\r\nclass GanttChart extends React.Component {\r\n\r\n    zoomScope = [0.1,0.25,0.5,0.75,1,1.25,1.5,2,3];\r\n\r\n    state = {\r\n        nominalWidth: this.props.tasks.length && setGanttNominalWidth(this.props.tasks),\r\n        zoom: 1,\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const nominalWidth = this.props.tasks.length && setGanttNominalWidth(this.props.tasks);\r\n        nominalWidth !== prevState.nominalWidth && this.setState({nominalWidth,zoom:1});\r\n    }\r\n\r\n    handleZoomChange = (ev)=>{\r\n\r\n        const zoom = ev.target.value;\r\n        this.state.nominalWidth * zoom < 1800 || this.setState({zoom});\r\n    }\r\n\r\n    getSuperTaskName = outlineNumber => {\r\n\r\n        let complexName = [];\r\n\r\n        const splitNo = outlineNumber.split(\".\");\r\n\r\n        const searchedNo = splitNo.slice(0, splitNo.length-1).join(\".\");\r\n\r\n        const task = this.props.tasks.find(task => task.outlineNumber === searchedNo);\r\n\r\n        if(task.outlineLevel > 1){\r\n            complexName = [...this.getSuperTaskName(task.outlineNumber)];\r\n        }\r\n\r\n        return [...complexName, task.name];\r\n\r\n    }\r\n\r\n    primaryFilter = (tasks) =>{\r\n        const powerFilter = new PowerFilter();\r\n\r\n        const {filter} = this.props;\r\n\r\n        return tasks.filter(task => task.isFinal && powerFilter.setTask(task)\r\n            .checkName(filter.get(\"name\"))\r\n            .checkTaskBeforeDate(filter.get(\"finish\"))\r\n            .checkTaskAfterDate(filter.get(\"start\"))\r\n            .checkDepartment(filter.get(\"department\"))\r\n            .checkTaskOwner(filter.get(\"person\"))\r\n            .checkStatus(filter.get(\"status\"))\r\n            .filterAll()\r\n        );\r\n    }\r\n\r\n    ganttConfig = {\r\n        ganttCanvaWidth: this.state.nominalWidth * this.state.zoom,\r\n        taskHeight: 15,\r\n        innerGapSize: 2,\r\n        taskDescriptionSize: 14,\r\n        gridDatesSize: 10,\r\n        gapSize: 15,\r\n        xOffset: 30,\r\n        yOffset: 50,\r\n        daysGrid: 5\r\n    }\r\n\r\n    render() {\r\n        this.ganttConfig.ganttCanvaWidth = this.state.nominalWidth * this.state.zoom < 1800 ? 1800 : this.state.nominalWidth * this.state.zoom;\r\n\r\n        const zoomOptions = this.zoomScope.map(zoom => (<option value={zoom}>{zoom}</option>));\r\n\r\n        let h = 0;\r\n        let ganttTasks = null;\r\n        let ganttGrid = null;\r\n        let ganttGridDates = null;\r\n\r\n        const {tasks} = this.props;\r\n\r\n        if (tasks.length) {\r\n           const {taskHeight, taskDescriptionSize,innerGapSize, gapSize, ganttCanvaWidth} = this.ganttConfig;\r\n\r\n           const filteredTasks = this.primaryFilter(tasks);\r\n           const minTime = PowerDate.getMinTaskTimeValue(filteredTasks);\r\n           const maxTime = PowerDate.getMaxTaskTimeValue(filteredTasks);\r\n\r\n           this.ganttConfig.resolution = ganttCanvaWidth / (maxTime - minTime);\r\n\r\n           h = (filteredTasks.filter(task => task.isFinal).length * (taskHeight + taskDescriptionSize + innerGapSize + gapSize));\r\n           ganttTasks = convertToGantTasks(filteredTasks, this.ganttConfig, this.getSuperTaskName)\r\n                .map(task => (<GanttTask task={task} ganttConfig={this.ganttConfig}/>));\r\n           ganttGrid = drawCanvaGrid(this.ganttConfig, minTime, maxTime);\r\n           ganttGridDates = getGridDates(this.ganttConfig, minTime, maxTime);\r\n        }\r\n         \r\n        return (<section className=\"gantt-chart\">\r\n        <svg width={this.ganttConfig.ganttCanvaWidth + 200} height=\"50px\" className=\"ganttCanvaHeader\">\r\n            {ganttGridDates}\r\n        </svg>\r\n        <svg width={this.ganttConfig.ganttCanvaWidth + 200} height={h} className=\"ganttCanva\">\r\n            {ganttGrid}\r\n            {ganttTasks}\r\n        </svg>\r\n        <select className=\"zoomSelection\" name=\"zoom\" value={this.state.zoom} onChange={ev=>this.handleZoomChange(ev)}>\r\n             {zoomOptions}\r\n         </select></section>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GanttChart;\r\n","import React from 'react';\r\n\r\nconst getStatusColor = statusName => {\r\n    let statusColor = null\r\n    switch (statusName) {\r\n        case \"done\":\r\n            statusColor = \"rgb(139, 204, 143)\";\r\n            break;\r\n        case \"to do\":\r\n            statusColor = \"rgb(204, 139, 139)\";\r\n            break;\r\n        case \"in progress\":\r\n            statusColor = \"rgb(242, 238, 153)\";\r\n            break;\r\n        default:\r\n            statusColor = \"transparent\";\r\n    }\r\n\r\n    return {backgroundColor: statusColor};\r\n\r\n}\r\n\r\nconst TaskRow = props => {\r\n\r\n    const {id, start, finish, status, assignments, percentComplete, selected, outlineLevel, outlineNumber, name} = props.task;\r\n\r\n    const indentation = {paddingLeft: (outlineLevel-1)*20}\r\n    // const complexName = outlineLevel > 1 ? [...props.taksNameGenrator(outlineNumber), name] : [name];\r\n\r\n    const resource = assignments.length ? assignments[0].resource.name : \"-\";\r\n\r\n    return (<tr onDoubleClick={() => props.activateTaskForm(id)}>\r\n        <td>{outlineNumber}</td>\r\n        <td style={indentation}>{name}</td>\r\n        <td>{start.substring(0, 10)}</td>\r\n        <td>{finish.substring(0, 10)}</td>\r\n        <td style={getStatusColor(status)}>{status}</td>\r\n        <td style={{cursor: \"default\"}} onMouseOver={ev => {props.activateToolTip(ev, id);}}\r\n                                        onMouseOut={props.disactivateToolTip}>{resource + (assignments.length > 1 ? \" ...\" : \"\")}</td>\r\n        <td onDoubleClick={ev => ev.stopPropagation()}>{percentComplete}</td>\r\n        <td><input type=\"checkbox\" checked={selected} onChange={ev=>props.handleTaskSelect(ev,id)}/></td>\r\n    </tr>);\r\n}\r\n\r\nexport default TaskRow;\r\n","import React from 'react';\r\nimport './TaskForm.css';\r\n\r\nclass TaskForm extends React.Component {\r\n    state = {\r\n        task: {\r\n            id: this.props.task.id,\r\n            name: this.props.task.name,\r\n            start: this.props.task.start,\r\n            finish: this.props.task.finish,\r\n            outlineNumber: this.props.task.outlineNumber,\r\n            outlineLevel: this.props.task.outlineLevel,\r\n            assignments: this.props.task.assignments,\r\n            percentComplete: this.props.task.percentComplete,\r\n            status: this.props.task.status,\r\n        },\r\n        newResource: {\r\n            newEffort: 0,\r\n            newResourceId: null,\r\n        },\r\n        errors: {\r\n            name: false,\r\n            start: false,\r\n            finish: false,\r\n            percentComplete: false,\r\n        }\r\n    }\r\n\r\n    messages = {\r\n        name: \"Name should contain at least 1 character\",\r\n        start: \"Start date format is incorrect or is later than finish date\",\r\n        finish: \"Finish date format is incorrect or is earlier than start date\",\r\n        percentComplete: \"Progress should be integer from 0 to 100\",\r\n    }\r\n\r\n    validateName = () => {\r\n\r\n        const {errors, task} = this.state;\r\n        const isEmpty = !task.name.length;\r\n        errors.name = isEmpty;\r\n\r\n        this.setState({errors});\r\n\r\n        return {name: isEmpty};\r\n\r\n    }\r\n\r\n    validateDates = () => {\r\n\r\n        const {task, errors} = this.state;\r\n\r\n        const startDate = new Date(task.start);\r\n        const finishDate = new Date(task.finish);\r\n\r\n        errors.start = isNaN(startDate.getTime());\r\n        errors.finish = isNaN(finishDate.getTime());\r\n\r\n        const isReverse = errors.start || errors.finish || startDate.getTime() > finishDate.getTime();\r\n\r\n        errors.start = errors.start || isReverse;\r\n        errors.finish = errors.finish || isReverse;\r\n\r\n        this.setState({errors});\r\n\r\n        return {\r\n            start: errors.start,\r\n            finish: errors.finish\r\n        };\r\n\r\n    }\r\n\r\n    correctDateValue = ev => {\r\n        const fieldName = ev.target.name;\r\n        const oppositeDate = fieldName == \"start\" ? \"finish\" : \"start\";\r\n\r\n        this.setState(prevState => {\r\n\r\n            const {task} = prevState;\r\n\r\n            task[oppositeDate] = Date.parse(task.finish) < Date.parse(task.start) ? task[fieldName] : task[oppositeDate];\r\n\r\n            return {task};\r\n        })\r\n\r\n    }\r\n\r\n    validatePercentage = () => {\r\n\r\n        const regExp = new RegExp(\"^(100|[1-9]?[0-9])$\");\r\n\r\n        const {errors, task} = this.state;\r\n        const isIncorrectValue = !regExp.test(task.percentComplete);\r\n        errors.percentComplete = isIncorrectValue;\r\n\r\n        this.setState({errors});\r\n\r\n        return {percentComplete: isIncorrectValue};\r\n    }\r\n\r\n    handleSubmit = ev => {\r\n        ev.preventDefault();\r\n\r\n        const {updateTask, exitTaskForm} = this.props;\r\n        const {task} = this.state;\r\n\r\n        const errors = Object.assign({}, this.validateName(), this.validateDates(), this.validatePercentage());\r\n\r\n        for (let key in errors) {\r\n            if (errors[key]) return alert(\"Form is not complete or some values are incorrect. \\n Please check form data.\");\r\n        }\r\n\r\n        updateTask(task);\r\n        exitTaskForm();\r\n    }\r\n\r\n\r\n    handleInputChange = ev => {\r\n\r\n        const {name, value} = ev.target;\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n            task[name] = name == \"percentComplete\" ? parseInt(value) : value;\r\n\r\n            return {task};\r\n        })\r\n\r\n    }\r\n    handleNewResourceChange = ev => {\r\n        const {name, value} = ev.target;\r\n\r\n        this.setState(prevState => {\r\n            const {newResource} = prevState;\r\n            newResource[name] = value;\r\n\r\n            return {newResource};\r\n        })\r\n\r\n    }\r\n\r\n    addNewResource = () => {\r\n        const {newResourceId, newEffort} = this.state.newResource;\r\n\r\n        if (!newResourceId && !newResourceId.length) return alert(\"NIE WYBRANO ZASOBU!!!\");\r\n\r\n        const newAssignedResource = {\r\n            resource: this.props.resources.find(resource => resource.id === newResourceId),\r\n            work: {\r\n                hours: newEffort,\r\n                minutes: 0,\r\n                seconds: 0\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n            task.resources.push(newAssignedResource);\r\n            return {\r\n                task,\r\n                newResource: {\r\n                    newResourceId: 0,\r\n                    newEffort: 0\r\n                }\r\n            };\r\n        })\r\n    }\r\n\r\n    handleResourceChange = (ev, id) => {\r\n\r\n        const {name, value} = ev.target;\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n\r\n            task.resources = task.resources.map(resource => {\r\n                if (resource.resource.id !== id) return resource;\r\n\r\n                if (name === \"resource\") {\r\n                    resource.resource = this.props.resources && this.props.resources.find(resource => resource.id === value);\r\n                } else if (name === \"work\") {\r\n                    resource.work.hours = value;\r\n                }\r\n\r\n                return resource;\r\n            });\r\n            return {task};\r\n        })\r\n\r\n    }\r\n\r\n    deleteResource = id => {\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n            task.resources = task.resources.filter(resource => resource.resource.id !== id);\r\n            return {task};\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const {name, start, finish, assignments, percentComplete} = this.state.task;\r\n        const {errors} = this.state;\r\n\r\n        const resourcesList = this.props.resources && this.props.resources\r\n            .filter(resource => resource.name !== \"\")\r\n            .map(resource => {\r\n                return {resource: resource.name + \" - \" + resource.department, id: resource.id};\r\n            })\r\n            .map((resource, index) => (<option key={index} value={resource.id}>{resource.resource}</option>));\r\n\r\n        const resourcesInputs = assignments.map(assignment => (\r\n            <div className=\"resourceBlock\">\r\n                <select value={assignment.resource.id} name=\"resource\"\r\n                        onChange={ev => this.handleResourceChange(ev, assignment.resource.id)}>\r\n                    {resourcesList}\r\n                </select>\r\n                <input className=\"workInput\" type=\"number\" name=\"work\" step=\"1\" min=\"0\" value={assignment.work.hours}\r\n                       onChange={ev => this.handleResourceChange(ev, assignment.resource.id)}/>\r\n                <button type=\"button\" onClick={() => {\r\n                    this.deleteResource(assignment.resource.id)\r\n                }}>X\r\n                </button>\r\n            </div>))\r\n\r\n        return (\r\n\r\n            <form className=\"taskForm\" style={{display: \"block\"}} onSubmit={this.handleSubmit}>\r\n                <div className=\"taskFormChart\"><h3>Task Chart</h3>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"taskNameInput\"><span>t</span>ask <span>n</span>ame:</label>\r\n                        <input id=\"taskNameInput\" type=\"text\" name=\"name\" value={name}\r\n                               onChange={ev => this.handleInputChange(ev)} onBlur={this.validateName}/>\r\n                        {errors.name && <span className=\"errorMsg\">{this.messages.name}</span>}\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"startDateInput\"><span>s</span>tart:</label>\r\n                        <input id=\"startDateInput\" type=\"date\" name=\"start\" value={start}\r\n                               onChange={ev => this.handleInputChange(ev)} onBlur={this.correctDateValue}/>\r\n                        {errors.start && <span className=\"errorMsg\">{this.messages.start}</span>}\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"finishDateInput\"><span>e</span>nd:</label>\r\n                        <input id=\"finishDateInput\" type=\"date\" name=\"finish\" value={finish}\r\n                               onChange={ev => this.handleInputChange(ev)} onBlur={this.correctDateValue}/>\r\n                        {errors.finish && <span className=\"errorMsg\">{this.messages.finish}</span>}\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"resourceInput\"><span>r</span>esources and efforts:</label>\r\n                        <div className=\"resourceBlock\">\r\n                            <select id=\"resourceInput\" name=\"newResourceId\" value={this.state.newResource.newResourceId}\r\n                                    onChange={ev => this.handleNewResourceChange(ev)}>\r\n                                <option value=\"\">Select...</option>\r\n                                {resourcesList}\r\n                            </select>\r\n                            <input id=\"workInput\" className=\"workInput\" type=\"number\" name=\"newEffort\"\r\n                                   value={this.state.newResource.newEffort}\r\n                                   onChange={ev => this.handleNewResourceChange(ev)}/>\r\n                            <button type=\"button\" onClick={this.addNewResource}>ADD</button>\r\n                        </div>\r\n                        {resourcesInputs}\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"completeInput\"><span>c</span>ompletion:</label>\r\n                        <input id=\"completeInput\" step=\"1\" min=\"0\" max=\"100\" type=\"number\" name=\"percentComplete\"\r\n                               value={percentComplete} onChange={ev => this.handleInputChange(ev)}\r\n                               onBlur={this.validatePercentage}/>\r\n                        {errors.percentComplete && <span className=\"errorMsg\">{this.messages.percentComplete}</span>}\r\n                    </div>\r\n                    <div className=\"formButtons\">\r\n                        <input type=\"submit\" value=\"save\"></input>\r\n                        <button type=\"button\" onClick={() => this.props.exitTaskForm()}>cancel</button>\r\n                    </div>\r\n                </div>\r\n            </form>);\r\n    }\r\n}\r\n\r\nexport default TaskForm;\r\n","import React from 'react';\r\nimport './ContextMenu.css';\r\n\r\n\r\nconst ContextMenu = props => {\r\n \r\n    const position = {\r\n        top: props.contextMenu.positionY,\r\n        left: props.contextMenu.positionX\r\n      }\r\n\r\n    return ( <ul className=\"buttonSetContex flexColumnCenter\" style={position}> \r\n                <li><button type=\"button\" onClick={() => props.downloadXmlFile(false)}>download all tasks</button></li>\r\n                <li><button type=\"button\" onClick={() => props.downloadXmlFile(true)} >dowload filterd tasks</button></li>\r\n                <li><button type=\"button\" onClick={() => alert(\"work in progress\")} >print</button></li>\r\n            </ul> );\r\n}\r\n \r\nexport default ContextMenu;","import React from 'react';\r\nimport TaskRow from './TaskRow';\r\nimport './TaskList.css';\r\nimport TaskForm from '../../Components/TaskForm';\r\nimport ToolTipResource from '../../Components/ToolTipResource';\r\nimport ContextMenu from '../../Components/ContextMenu';\r\nimport PowerFilter from \"../../Service/PowerFilter\";\r\n\r\nclass TaskList extends React.Component {\r\n    state = {\r\n        isResourceInfoActive: false,\r\n        editedTaskId: null,\r\n        resourceInfo: null,\r\n        contextMenu: null\r\n     }\r\n\r\n\r\n    activateToolTip = (ev, taskId) =>{\r\n        const {clientY, clientX} = ev;\r\n\r\n        this.setState({\r\n            resourceInfo: {\r\n                taskId: taskId,\r\n                positionX: clientX,\r\n                positionY: clientY\r\n            }\r\n        })\r\n     }\r\n\r\n    disactivateToolTip = () =>{\r\n\r\n        this.setState({\r\n            resourceInfo: null,\r\n        })\r\n     }\r\n\r\n    handleDoubleClickRow = editedTaskId => {\r\n        this.setState({editedTaskId});\r\n    }\r\n\r\n    exitTaskForm = () =>{\r\n        this.setState({editedTaskId: null,});\r\n    }\r\n\r\n    handleContextMenu = ev =>{\r\n\r\n        if(this.state.contextMenu) return false;\r\n\r\n        const {clientX, clientY} = ev;\r\n\r\n        this.setState({\r\n            contextMenu: {\r\n                positionX: clientX,\r\n                positionY: clientY\r\n            }\r\n        })\r\n    }\r\n\r\n    exitContextMenu = () => {\r\n        this.setState({\r\n            contextMenu: null\r\n        })\r\n    }\r\n\r\n    handleKeyDown = ev => {\r\n        ev = ev || window.event;\r\n        ev.keyCode === 27 && this.exitContextMenu();\r\n    }\r\n\r\n    handleSelectAll = ev =>{\r\n\r\n        const selected = ev.target.checked;\r\n\r\n        this.props.tasks.forEach(task => {\r\n            task.selected = selected;\r\n            this.props.updateTask(task);})\r\n\r\n    }\r\n\r\n    handleTaskSelect = (ev, id) =>{\r\n\r\n        const task = this.props.tasks.find(task=>task.id === id);\r\n\r\n        if (task) task.selected = ev.target.checked;\r\n\r\n        this.props.updateTask(task);\r\n\r\n    }\r\n\r\n    // getSuperTaskName = outlineNumber => {\r\n    //\r\n    //     let complexName = [];\r\n    //\r\n    //     const splitNo = outlineNumber.split(\".\");\r\n    //\r\n    //     const searchedNo = splitNo.slice(0, splitNo.length-1).join(\".\");\r\n    //\r\n    //     const task = this.props.tasks.find(task => task.outlineNumber === searchedNo);\r\n    //\r\n    //     if(task.outlineLevel > 1){\r\n    //       complexName = [...this.getSuperTaskName(task.outlineNumber)];\r\n    //     }\r\n    //\r\n    //     return [...complexName, task.name];\r\n    //\r\n    // }\r\n\r\n    primaryFilter = (tasks) =>{\r\n        const powerFilter = new PowerFilter();\r\n        const {filter} = this.props;\r\n\r\n        return tasks.filter(task => powerFilter.setTask(task)\r\n            .checkName(filter.get(\"name\"))\r\n            .checkTaskBeforeDate(filter.get(\"finish\"))\r\n            .checkTaskAfterDate(filter.get(\"start\"))\r\n            .checkDepartment(filter.get(\"department\"))\r\n            .checkTaskOwner(filter.get(\"person\"))\r\n            .checkStatus(filter.get(\"status\"))\r\n            .filterAll()\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        let resources = [];\r\n        let tableRows = null;\r\n        let editedTask = null;\r\n\r\n        const {tasks} = this.props;\r\n        if(tasks.length){\r\n\r\n            tableRows = this.primaryFilter(tasks)\r\n                            .map((task, index)=>(<TaskRow key={task.id} task={task} /*taksNameGenrator={this.getSuperTaskName} index={index}*/ activateToolTip={this.activateToolTip} disactivateToolTip={this.disactivateToolTip} activateTaskForm={this.handleDoubleClickRow} updateTask={this.props.updateTask} handleTaskSelect={this.handleTaskSelect}/>));\r\n\r\n            const indexEditedTask = this.state.editedTaskId && this.props.tasks.findIndex(task => task.id === this.state.editedTaskId);\r\n            \r\n            editedTask = indexEditedTask >= 0 && this.props.tasks[indexEditedTask];\r\n\r\n            if (this.state.resourceInfo){\r\n                const activeTaskIndex = this.props.tasks.findIndex(task => task.id === this.state.resourceInfo.taskId);\r\n                resources = this.props.tasks[activeTaskIndex].assignments;\r\n            }\r\n        \r\n        }\r\n        return tasks.length > 0 && (<section className=\"taskList\" onClick={this.exitContextMenu}\r\n                                                        onKeyDown={this.handleKeyDown}\r\n                                                        tabIndex=\"0\"\r\n                                                        onContextMenu={ev => {  ev.preventDefault();\r\n                                                            this.handleContextMenu(ev);}}>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>on</th>\r\n                        <th>name</th>\r\n                        <th>start</th>\r\n                        <th>finish</th>\r\n                        <th>status</th>\r\n                        <th>resources</th>\r\n                        <th>complete</th>\r\n                        <th><input type=\"checkbox\" onChange={this.handleSelectAll}/></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableRows}\r\n                </tbody>\r\n            </table>\r\n            {resources.length > 1 ? <ToolTipResource id=\"toolTip\" resources={resources} xPosition={this.state.resourceInfo.positionX} yPosition={this.state.resourceInfo.positionY}/>: null}\r\n            {editedTask && <TaskForm task={editedTask} exitTaskForm={this.exitTaskForm} resources={this.props.resources} updateTask={this.props.updateTask}/>}\r\n            {this.state.contextMenu && <ContextMenu contextMenu={this.state.contextMenu} downloadXmlFile={this.props.downloadXmlFile} rem={this.remove}/>}\r\n            </section> );\r\n       \r\n    }\r\n    }\r\n \r\nexport default TaskList;\r\n\r\n","import React from \"react\";\r\nimport PrevArrow from \"../../images/prevArrow.svg\";\r\nimport NextArrow from \"../../images/forwArrow.svg\";\r\nimport \"./Slider.css\";\r\n\r\nconst Slider = props => {\r\n  const {selectedValue, startRange, endRange, deacreaseValue, increaseValue} = props;\r\n\r\n  return (\r\n    <div className=\"slider\">\r\n      <button disabled={startRange >= selectedValue} onClick={deacreaseValue}> <img src={PrevArrow} alt=\"\" /></button>\r\n      <div>{selectedValue}</div>\r\n      <button disabled={endRange <= selectedValue} onClick={increaseValue}> <img src={NextArrow} alt=\"\" /></button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React from \"react\";\r\nimport Slider from \"./Slider\";\r\nimport PowerDate from \"../../Service/PowerDate\";\r\nimport \"./Holidays.css\";\r\n\r\nconst getCurrentYear = () =>{\r\n    const today = new Date();\r\n    return today.getFullYear();\r\n}\r\n\r\nconst extractYear = stringDate =>{\r\n    const day = new Date(stringDate);\r\n    return day.getFullYear();\r\n}\r\n\r\nconst extractDayNo = stringDate =>{\r\n    const day = new Date(stringDate);\r\n    return day.getDay();\r\n}\r\n\r\nconst generateAbsenceRiskDate = stringDate =>{\r\n    \r\n    const day = new Date(stringDate);\r\n\r\n    if(isNaN(day.getTime())) return \"błąd\";\r\n    \r\n    let milliNewDate = null;\r\n    const DAILY_MILLISECONDS = 86400000;\r\n\r\n    if(day.getDay()===2 || day.getDay()===4)\r\n        milliNewDate = day.getDay() === 2 ? day.getTime() - DAILY_MILLISECONDS : day.getTime() + DAILY_MILLISECONDS;\r\n    \r\n    return milliNewDate ? PowerDate.getSimplifyDate(milliNewDate) : \"-\"; \r\n\r\n}\r\n\r\nconst getWeekendColor = dayName => {\r\n\r\n    let dayColor = dayName === \"Sunday\" || dayName === \"Saturday\" ? \"rgb(189, 94, 94)\" : \"rgb(0, 0, 0)\";\r\n    return {color: dayColor};\r\n}\r\n\r\nclass Holidays extends React.Component {\r\n    state = { \r\n        selectedYear: getCurrentYear(),\r\n     }\r\n\r\n    weekDays = [\"Sunday\",\"Monday\",\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n\r\n    handleDecrease = () =>{\r\n        this.setState(prevState=>{\r\n            let {selectedYear} = prevState;\r\n            selectedYear--;\r\n\r\n            return {selectedYear};\r\n        })\r\n    } \r\n\r\n    handleIncrease = () => {\r\n        this.setState(prevState=>{\r\n            let {selectedYear} = prevState;\r\n            selectedYear++;\r\n\r\n            return {selectedYear};\r\n        })\r\n    } \r\n\r\n    render() { \r\n\r\n        const {selectedYear} = this.state;\r\n        const {holidays} = this.props;\r\n\r\n\r\n        const tableRows = holidays.filter(holiday => extractYear(holiday.Date) === selectedYear).map((holiday, index) => {\r\n          const dayName = this.weekDays[extractDayNo(holiday.Date)];\r\n          return (<tr key={index}>\r\n            <td>{index + 1}</td>\r\n            <td>{holiday.HolidayName}</td>\r\n            <td>{holiday.Date}</td>\r\n            <td style={getWeekendColor(dayName)}>{dayName}</td>\r\n            <td>{generateAbsenceRiskDate(holiday.Date)}</td>\r\n        </tr>)\r\n        });\r\n\r\n        const dates = holidays.map(holiday => holiday.Date);\r\n        const minYear = PowerDate.getMinYearFromDates(dates);\r\n        const maxYear = PowerDate.getMaxYearFromDates(dates);\r\n\r\n        return ( <section className=\"holidays\">\r\n                    <Slider selectedValue={selectedYear} startRange={minYear} endRange={maxYear} deacreaseValue={this.handleDecrease} increaseValue={this.handleIncrease}/>\r\n                    <table >\r\n                        <thead>\r\n                            <tr>\r\n                                <th>on</th>\r\n                                <th>holiday</th>\r\n                                <th>date</th>\r\n                                <th>day</th>\r\n                                <th>absence risk</th>\r\n                            </tr>\r\n                        </thead>\r\n                    <tbody>\r\n                        {tableRows}\r\n                    </tbody>\r\n            </table>\r\n                </section>\r\n\r\n         );\r\n    }\r\n}\r\n \r\nexport default Holidays;\r\n","import React from 'react';\r\nimport \"./MainPage.css\";\r\nimport MainImage from \"../images/main.jpg\";\r\nimport Duration from \"../images/duration.svg\";\r\nimport ToDo from \"../images/toDo.svg\";\r\nimport Inprogress from \"../images/inProgress.svg\";\r\nimport Done from \"../images/done.svg\";\r\nimport PowerDate from \"../Service/PowerDate\";\r\n\r\n\r\nconst MainPage = props => {\r\n\r\n    let taskInfo = null;\r\n\r\n    if (props.tasks.length) {\r\n        const tasksToDo = props.tasks.filter(task => task.status === \"to do\" && task.isFinal).length;\r\n        const tasksInProgress = props.tasks.filter(task => task.status === \"in progress\" && task.isFinal).length;\r\n        const tasksDone = props.tasks.filter(task => task.status === \"done\" && task.isFinal).length;\r\n\r\n        let startDate = PowerDate.getMinTaskTimeValue(props.tasks);\r\n        let finishDate = PowerDate.getMaxTaskTimeValue(props.tasks);\r\n\r\n        taskInfo = (<div className=\"main-page-info\">\r\n            <h2>Project {props.name.split(\".xml\")[0]}</h2>\r\n            <ul>\r\n                <li><img src={Duration} alt=\"\"/>\r\n                    <p>project duration from {PowerDate.getSimplifyDate(startDate)} to {PowerDate.getSimplifyDate(finishDate)} </p>\r\n                </li>\r\n                <li><img src={ToDo} alt=\"\"/>\r\n                    <p>count task to do: {tasksToDo}</p>\r\n                </li>\r\n                <li><img src={Inprogress} alt=\"\"/>\r\n                    <p>count task in progress: {tasksInProgress}</p>\r\n                </li>\r\n                <li><img src={Done} alt=\"\"/>\r\n                    <p>count task done: {tasksDone}</p>\r\n                </li>\r\n            </ul>\r\n        </div>)\r\n    }\r\n    const basicInfo = (<div className=\"main-page-info\"><h2>no project loaded</h2>\r\n    <p className=\"main-page-description\">This is application for reading MS Project schedule with xml extension. Please apply project file by click button in the right up corner.</p></div>)\r\n\r\n    return (<section className=\"main-page\">\r\n        <img className=\"main-page-heroImg\" src={MainImage} alt=\"\"/>\r\n            {taskInfo || basicInfo}\r\n\r\n    </section>);\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport \"./MainPage.css\";\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <section className=\"main-page-info\">\r\n            <h2>Error</h2>\r\n            <p className=\"main-page-description\">Page not found. Please select page from side menu.</p>\r\n        </section>\r\n     );\r\n}\r\n \r\nexport default ErrorPage;","import React from 'react';\r\nimport {Route,Switch} from 'react-router-dom';\r\n\r\nimport KanbanBoard from '../Charts/Kanban/KanbanBoard';\r\nimport GanttChart from '../Charts/Gantt/GanttChart';\r\nimport TaskList from '../Charts/List/TaskList';\r\nimport Holidays from \"../Charts/Holidays/Holidays\";\r\n\r\nimport MainPage from \"../Charts/MainPage\";\r\nimport ErrorPage from \"../Charts/ErrorPage\";\r\n\r\nimport './MainChart.css';\r\n\r\nconst MainChart = props => {\r\n    return ( \r\n    <section className=\"mainChart\">\r\n        <Switch>\r\n            <Route path=\"/\" exact={true} render={() => <MainPage  {...props} />}/>\r\n            <Route path=\"/kanban\" render={() => <KanbanBoard  {...props} />}/>\r\n            <Route path=\"/gantt\" render={() => <GanttChart {...props} />}/>\r\n            <Route path=\"/list\" render={() => <TaskList {...props} />}/>\r\n            <Route path=\"/holidays\" render={() => <Holidays {...props} />}/>\r\n            <Route component={ErrorPage} />}/>\r\n        </Switch>\r\n    </section> \r\n    );\r\n}\r\n \r\nexport default MainChart;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport Rocket from \"../images/rocket.svg\";\r\nimport Upload from \"../images/upload.svg\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n\r\n\r\n  render() {\r\n    const {name, filePath, handleFile} = this.props;\r\n    return (\r\n      <div className=\"header\">\r\n        <Link className=\"header-logo\" to=\"/\" style={{ width: \"300px\", height: \"50px\", display: \"flex\" }}>\r\n          <img src={Rocket} alt=\"\" />\r\n          <p>Power Project</p>\r\n        </Link>\r\n        {/* <div className=\"header-logo\" style={{ width: \"300px\", height: \"50px\", display: \"flex\" }}>\r\n          <img src={Rocket} alt=\"\" />\r\n          <p>Power Project</p>\r\n        </div> */}\r\n        <p className=\"uppercaseBold\">{name ? name.split(\".xml\")[0] : \"\"}</p>\r\n        <input ref={inputFile => this.inputFile = inputFile} type=\"file\" accept=\"text/xml\" value={filePath} onChange={ev => handleFile(ev)}\r\n          style={{ display: \"none\" }}/>\r\n        <button type=\"button\" onClick={()=>this.inputFile.click()}>\r\n          <img src={Upload} alt=\"\" />\r\n          <p>APPLY PROJECT</p>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Arrow from \"../images/arrow.svg\";\r\nimport './Filters.css';\r\n\r\nclass Filters extends React.Component {\r\n    state = {\r\n        isExtended: false,\r\n    }\r\n\r\n\r\n    handleClickButton = () => {\r\n        const isExtended = !this.state.isExtended;\r\n        this.setState({isExtended});\r\n    }\r\n\r\n    render() {\r\n        const {filters ,setFilter, resources, statusesList} = this.props;\r\n        const angleFilterArrow = this.state.isExtended ? 180 : 0;\r\n        const statuses = [];\r\n\r\n        const departmentList = resources && resources.filter(resource => resource.department !== \"\")\r\n                .map(resource => resource.department)\r\n                .filter((department, index, array) => array.indexOf(department) === index && department !== null)\r\n                .map((department, index) => (<option key={index} value={department} >{department}</option>));\r\n\r\n        if(statusesList){\r\n            let index = 0;\r\n            for (let status in statusesList){\r\n                statuses.push((<option key={index}\r\n                                       value={statusesList[status]}\r\n                                      >{statusesList[status].toUpperCase()}</option>));\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <section className=\"filters\">\r\n                <button onClick={this.handleClickButton}>\r\n                    <img src={Arrow} alt=\"arrow\" style={{transform: `rotate(${angleFilterArrow}deg)`}}/>\r\n                    <p>filters</p>\r\n                </button>\r\n                <div className=\"filter-inputs\" style={{height: this.state.isExtended ? \"80px\" : \"0px\"}}>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"nameFilter\">task name:</label>\r\n                        <input id=\"nameFilter\" type=\"text\" name=\"name\" onChange={setFilter} value={filters.get(\"name\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"name\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"startDateFilter\">task start:</label>\r\n                        <input id=\"startDateFilter\" type=\"date\" name=\"start\" onChange={setFilter} value={filters.get(\"start\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"start\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"endDateFilter\">task finish:</label>\r\n                        <input id=\"endDateFilter\" type=\"date\" name=\"finish\" onChange={setFilter} value={filters.get(\"finish\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"finish\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"personFilter\">task owner:</label>\r\n                        <input id=\"personFilter\" type=\"text\" name=\"person\" onChange={setFilter} value={filters.get(\"person\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"person\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"departmentFilter\">department:</label>\r\n                        <select id=\"departmentFilter\" name=\"department\" onChange={setFilter} value={filters.get(\"department\")}>\r\n                            <option value=\"\">Select...</option>\r\n                            {departmentList || false}\r\n                        </select>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"department\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"statusFilter\">status:</label>\r\n                        <select id=\"statusFilter\" name=\"status\" onChange={setFilter} value={filters.get(\"status\")}>\r\n                            <option value=\"\">Select...</option>\r\n                            {statuses || false}\r\n                        </select>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"status\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"all\" className=\"clear-all-button\">clear all</button>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filters;\r\n\r\n","class PowerFileValidator{\r\n\r\n    static PROJECT_OBJECT_TEMPLATE = {\r\n        Project: {\r\n          Tasks: {\r\n            Task: []\r\n          },\r\n          Resources: {\r\n            Resource: []\r\n          },\r\n          Assignments: {}\r\n        }\r\n      };\r\n\r\n      static TASK_OBJECT_TEMPLATE = {\r\n        UID: {\r\n          _text: \"\",\r\n        },\r\n        Name:{\r\n          _text: \"\",\r\n        },\r\n        Start: {\r\n          _text: \"\",\r\n        },\r\n        Finish:{\r\n          _text: \"\",\r\n        },\r\n        OutlineNumber:{\r\n          _text: \"\",\r\n        },\r\n        OutlineLevel:{\r\n          _text: \"\",\r\n        },\r\n        PercentComplete:{\r\n          _text: \"\",\r\n        }\r\n      };\r\n\r\n      static RESOURCE_OBJECT_TEMPLATE = {\r\n        UID: {\r\n          _text: \"\"\r\n        },\r\n        Name: {\r\n          _text: \"\"\r\n        }\r\n      }\r\n\r\n      static ASSIGNMENT_OBJECT_TEMPLATE = {\r\n        TaskUID: {\r\n          _text: \"\"\r\n        },\r\n        ResourceUID: {\r\n          _text: \"\"\r\n        },\r\n        Work: {\r\n          _text: \"\"\r\n        }\r\n      }\r\n      \r\n      static isMsProjectStructure (template, checkedObject) {\r\n        let result = true;\r\n        for (const key in template) {\r\n\r\n          if (!template.hasOwnProperty(key) || !checkedObject.hasOwnProperty(key)){\r\n            return false;\r\n          }\r\n\r\n          if (typeof template[key] === \"object\" && Object.keys(template[key]).length) {\r\n            result = this.isMsProjectStructure(template[key], checkedObject[key]);\r\n          }\r\n\r\n          if(!result) break;\r\n\r\n        }\r\n        return result;\r\n      }\r\n\r\n      static isXmlFile(file) {\r\n       \r\n        if (file) throw new Error(\"No files provided!\");\r\n      \r\n        return \"text/xml\" === file.type;\r\n      }\r\n\r\n\r\n}\r\nexport default PowerFileValidator;\r\n","class IncorrectFileError extends Error {\r\n    constructor(...params) {\r\n      // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n      super(...params);\r\n  \r\n      // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n      if (Error.captureStackTrace) {\r\n        Error.captureStackTrace(this, IncorrectFileError);\r\n      }\r\n    }\r\n\r\n  }\r\n  export default IncorrectFileError;","import React from \"react\";\nimport \"./App.css\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport ChartNav from \"./layouts/ChartNav\";\nimport MainChart from \"./layouts/MainChart\";\nimport Header from \"./layouts/Header\";\nimport Filters from './layouts/Filters';\nimport PowerFileValidator from \"./Service/PowerFileValidator\";\nimport IncorrectFileError from \"./Errors/IncorrectFileError\";\nimport PowerFilter from \"./Service/PowerFilter\";\nimport PowerDate from \"./Service/PowerDate\";\n\nconst holidaysJSON = `{\n  \"holiday\": [\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2018-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2018-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2018-04-01\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2018-04-02\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2018-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2018-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2018-05-20\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2018-05-31\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2018-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2018-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2018-11-11\"\n     },\n     {\n        \"HolidayName\": \"12 listopada po Święcie Niepodległości\",\n        \"Date\": \"2018-11-12\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2018-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2018-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2019-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2019-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2019-04-21\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2019-04-22\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2019-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2019-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2019-06-09\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2019-06-20\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2019-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2019-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2019-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2019-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2019-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2020-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2020-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2020-04-12\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2020-04-13\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2020-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2020-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2020-05-31\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2020-06-11\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2020-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2020-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2020-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2020-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2020-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2021-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2021-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2021-04-04\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2021-04-05\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2021-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2021-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2021-05-23\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2021-06-03\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2021-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2021-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2021-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2021-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2021-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2022-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2022-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2022-04-17\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2022-04-18\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2022-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2022-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2022-06-05\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2022-06-16\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2022-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2022-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2022-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2022-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2022-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2023-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2023-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2023-04-09\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2023-04-10\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2023-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2023-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2023-05-28\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2023-06-08\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2023-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2023-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2023-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2023-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2023-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2024-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2024-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2024-03-31\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2024-04-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2024-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2024-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2024-05-19\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2024-05-30\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2024-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2024-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2024-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2024-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2024-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2025-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2025-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2025-04-20\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2025-04-21\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2025-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2025-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2025-06-08\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2025-06-19\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2025-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2025-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2025-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2025-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2025-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2026-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2026-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2026-04-05\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2026-04-06\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2026-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2026-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2026-05-24\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2026-06-04\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2026-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2026-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2026-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2026-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2026-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2027-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2027-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2027-03-28\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2027-03-29\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2027-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2027-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2027-05-16\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2027-05-27\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2027-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2027-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2027-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2027-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2027-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2028-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2028-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2028-04-16\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2028-04-17\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2028-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2028-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2028-06-04\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2028-06-15\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2028-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2028-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2028-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2028-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2028-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2029-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2029-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2029-04-01\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2029-04-02\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2029-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2029-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2029-05-20\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2029-05-31\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2029-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2029-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2029-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2029-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2029-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2030-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2030-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2030-04-21\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2030-04-22\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2030-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2030-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2030-06-09\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2030-06-20\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2030-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2030-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2030-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2030-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2030-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2031-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2031-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2031-04-13\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2031-04-14\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2031-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2031-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2031-06-01\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2031-06-12\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2031-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2031-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2031-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2031-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2031-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2032-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2032-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2032-03-28\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2032-03-29\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2032-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2032-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2032-05-16\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2032-05-27\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2032-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2032-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2032-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2032-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2032-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2033-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2033-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2033-04-17\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2033-04-18\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2033-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2033-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2033-06-05\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2033-06-16\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2033-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2033-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2033-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2033-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2033-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2034-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2034-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2034-04-09\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2034-04-10\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2034-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2034-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2034-05-28\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2034-06-08\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2034-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2034-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2034-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2034-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2034-12-26\"\n     },\n     {\n        \"HolidayName\": \"Nowy Rok, Świętej Bożej Rodzicielki\",\n        \"Date\": \"2035-01-01\"\n     },\n     {\n        \"HolidayName\": \"Trzech Króli (Objawienie Pańskie)\",\n        \"Date\": \"2035-01-06\"\n     },\n     {\n        \"HolidayName\": \"Wielkanoc\",\n        \"Date\": \"2035-03-25\"\n     },\n     {\n        \"HolidayName\": \"Poniedziałek Wielkanocny\",\n        \"Date\": \"2035-03-26\"\n     },\n     {\n        \"HolidayName\": \"Święto Pracy\",\n        \"Date\": \"2035-05-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Konstytucji 3 Maja\",\n        \"Date\": \"2035-05-03\"\n     },\n     {\n        \"HolidayName\": \"Zesłanie Ducha Świętego (Zielone Świątki)\",\n        \"Date\": \"2035-05-13\"\n     },\n     {\n        \"HolidayName\": \"Boże Ciało\",\n        \"Date\": \"2035-05-24\"\n     },\n     {\n        \"HolidayName\": \"Święto Wojska Polskiego, Wniebowzięcie Najświętszej Maryi Panny\",\n        \"Date\": \"2035-08-15\"\n     },\n     {\n        \"HolidayName\": \"Wszystkich Świętych\",\n        \"Date\": \"2035-11-01\"\n     },\n     {\n        \"HolidayName\": \"Święto Niepodległości\",\n        \"Date\": \"2035-11-11\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (pierwszy dzień)\",\n        \"Date\": \"2035-12-25\"\n     },\n     {\n        \"HolidayName\": \"Boże Narodzenie (drugi dzień)\",\n        \"Date\": \"2035-12-26\"\n     }\n  ]\n}\n`;\n\nconst readFile = (file, handleFileContent) => {\n    const reader = new FileReader();\n\n    reader.onload = event => {\n        event.target.result && handleFileContent(event.target.result);\n    };\n\n    file && reader.readAsText(file);\n}\n\nfunction isXmlFile(file) {\n\n\n    if (/*!inputFileElement.files.length*/ !file) throw new Error(\"No files provided!\");\n\n    return \"text/xml\" === /*inputFileElement.files[0]*/file.type;\n\n}\n\nconst combineProjectElements = (tasks, resources, assignments) => {\n    tasks = tasks.map(task => {\n\n        const taskResources = assignments\n            .filter(assignment => assignment.taskId === task.id && assignment.resourceId >= 0)\n            .map(assignment => {\n                const assignedResource = {};\n                assignedResource.resource = resources.find(resource => resource.id === assignment.resourceId);\n                assignedResource.work = assignment.work;\n                return assignedResource;\n\n            });\n\n        // task.resources = taskResources;\n        task.assignments = taskResources;\n\n        return task;\n    });\n    return tasks;\n}\n\nconst setComplexName = (tasks, outlineNumber, name = [], level = 1) => {\n\n    level++;\n\n    const selectedTask = tasks.find(task => task.outlineNumber === outlineNumber);\n\n    const subtasks = tasks.filter(subtask => subtask.outlineNumber.startsWith(selectedTask.outlineNumber) && subtask.outlineLevel === level)\n        .map(subtask => {\n            setComplexName(tasks, subtask.outlineNumber, [...name, selectedTask.name], level);\n            return subtask;\n        });\n\n    selectedTask.isFinal = !subtasks.length;\n    selectedTask.complexName = /*!subtasks.length ?*/ [...name, selectedTask.name] /*: null*/;\n\n\n}\n\nconst parseWorkObject = (workCode) => {\n\n    if (!workCode) throw new Error(\"No work code provided!\");\n    const work = {};\n\n    work.hours = parseInt(workCode.split(\"PT\")[1].split(\"H\")[0]);\n    work.minutes = parseInt(workCode.split(\"H\")[1].split(\"M\")[0]);\n    work.seconds = parseInt(workCode.split(\"M\")[1].split(\"S\")[0]);\n\n    return work;\n}\n\nclass App extends React.Component {\n    state = {\n        file: null,\n        tasks: [],\n        filter: new Map(),\n    };\n\n    taskStatuses = {\n        TO_DO: \"to do\",\n        IN_PROGRESS: \"in progress\",\n        DONE: \"done\"\n    }\n\n    handleFile = ev => {\n\n        if (!ev.target.files) throw new TypeError(\"Incorrect element type!\");\n        if (!ev.target.files.length) return alert(\"No files attached\");\n\n        const file = ev.target.files[0];\n\n        if (!isXmlFile(file)) return alert(\"Niewłaściwy format pliku! \\n Wprowadź plik xml.\");\n\n        this.setState({file});\n        readFile(file, this.handleProjctXml);\n    };\n\n    getTaskStatus = (percent) => {\n\n        if (!percent) return this.taskStatuses.TO_DO;\n        if (percent == 100) return this.taskStatuses.DONE;\n\n        return this.taskStatuses.IN_PROGRESS;\n    };\n\n    handleProjctXml = xmlText => {\n        const convert = require(\"xml-js\");\n        try {\n            const msProjectJson = convert.xml2js(xmlText, {\n                compact: true,\n                spaces: 4\n            });\n\n            if (!PowerFileValidator.isMsProjectStructure(PowerFileValidator.PROJECT_OBJECT_TEMPLATE, msProjectJson)) throw new IncorrectFileError(\"It isn't MS Project file.Please select correct file.\");\n\n            let {\n                Tasks: {Task: tasks},\n                Resources: {Resource: resources},\n                Assignments: {Assignment: assignments}\n            } = msProjectJson.Project;\n\n            tasks = Array.isArray(tasks) ? tasks : [tasks];\n\n            tasks = tasks.filter(task => PowerFileValidator.isMsProjectStructure(PowerFileValidator.TASK_OBJECT_TEMPLATE, task) && task.UID._text !== \"0\")\n                .map(task => ({\n                    id: parseInt(task.UID._text),\n                    name: task.Name._text,\n                    start: PowerDate.getSimplifyDate(task.Start._text),\n                    finish: PowerDate.getSimplifyDate(task.Finish._text),\n                    status: this.getTaskStatus(parseInt(task.PercentComplete._text)),\n                    outlineNumber: task.OutlineNumber._text,\n                    outlineLevel: parseInt(task.OutlineLevel._text),\n                    mainOutlineNo: parseInt(task.OutlineNumber._text.split(\".\")[0]),\n                    percentComplete: parseInt(task.PercentComplete._text),\n                    selected: false\n                }));\n\n            resources = Array.isArray(resources) ? resources : [resources];\n            resources = resources\n                .filter(resource => PowerFileValidator.isMsProjectStructure(PowerFileValidator.RESOURCE_OBJECT_TEMPLATE, resource))\n                .map(resource => ({\n                    id: parseInt(resource.UID._text),\n                    name: resource.Name._text,\n                    department: resource.Group ? resource.Group._text : \"\"\n                }));\n\n            assignments = assignments || [];\n            assignments = Array.isArray(assignments) ? assignments : [assignments];\n            assignments = assignments\n                .filter(assignment => PowerFileValidator.isMsProjectStructure(PowerFileValidator.ASSIGNMENT_OBJECT_TEMPLATE, assignment))\n                .map(assignment => ({\n                    taskId: parseInt(assignment.TaskUID._text),\n                    resourceId: parseInt(assignment.ResourceUID._text),\n                    work: parseWorkObject(assignment.Work._text)\n                }));\n\n            tasks = combineProjectElements(tasks, resources, assignments);\n\n            tasks.filter(task => task.outlineLevel === 1)\n                .forEach(task => setComplexName(tasks, task.outlineNumber));\n\n            this.setState(() => {\n                return {\n                    tasks,\n                    resources\n                };\n            });\n        } catch (error) {\n            alert(error.message);\n            alert(error.name);\n            console.log(error.stack);\n        }\n    };\n\n    handleFilter = ev => {\n\n        const {name, value} = ev.target;\n\n        this.setState(prevState => {\n            const {filter} = prevState;\n            filter.set(name, value);\n\n            return {filter};\n        })\n    }\n\n    clearFilter = ev => {\n\n        const {name} = ev.target;\n\n        if (name !== \"all\") {\n            this.setState(prevState => {\n                const {filter} = prevState;\n                filter.set(name, \"\");\n\n                return {filter};\n            })\n        } else {\n            this.getDefaultFilters();\n        }\n    }\n\n    componentWillMount(){\n        let {holiday} = JSON.parse(holidaysJSON);\n        this.setState({holidays: holiday});\n    }\n\n    downloadXmlFile = (filterdList) =>{\n\n        const powerFilter = new PowerFilter();\n        const {filter, tasks} = this.state;\n\n        if(!tasks.length) return alert(\"No tasks loaded! \\n\\n Load tasks to download it.\");\n\n        const task = filterdList ? tasks.filter(task => task.complexName && powerFilter.setTask(task)\n            .checkName(filter.get(\"name\"))\n            .checkTaskBeforeDate(filter.get(\"finish\"))\n            .checkTaskAfterDate(filter.get(\"start\"))\n            .checkDepartment(filter.get(\"department\"))\n            .checkTaskOwner(filter.get(\"person\"))\n            .checkStatus(filter.get(\"status\"))\n            .filterAll()) : this.state.tasks;\n\n        const convert = require(\"xml-js\");\n        const options = {compact: true, ignoreComment: true, spaces: 4};\n        const result = convert.js2xml({tasks:{task}}, options);\n\n        const xmlFile = new Blob([result], {type:\"text/xml\"});\n\n        if(window.navigator.msSaveOrOpenBlob){\n            window.navigator.msSaveOrOpenBlob(xmlFile, this.state.file.name);\n        }else{\n            const url = window.URL.createObjectURL(xmlFile);\n\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = this.state.file.name;\n            a.click();\n            setTimeout(() => window.URL.revokeObjectURL(url), 0);\n        }\n    }\n\n    updateTask = changedTask => {\n\n        this.setState(prevState => {\n\n            const {tasks} = prevState;\n\n            if (changedTask && changedTask.id) tasks.forEach(task => {\n                if (task.id === changedTask.id) {\n                    Object.assign(task, changedTask);\n                    task.status = this.getTaskStatus(task.percentComplete);\n                }\n            });\n\n            return {tasks};\n\n        })\n    }\n\n\n\n    componentDidMount() {\n        this.getDefaultFilters();\n    }\n\n    getDefaultFilters = () => {\n        this.setState(prevState => {\n            const {filter} = prevState;\n            filter.set(\"name\", \"\");\n            filter.set(\"person\", \"\");\n            filter.set(\"start\", \"\");\n            filter.set(\"finish\", \"\");\n            filter.set(\"department\", \"\");\n            filter.set(\"status\", \"\");\n\n            return {filter};\n        })\n    }\n\n    render() {\n\n        const {filter, tasks} = this.state;\n\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <>\n                    <header>\n                        <Header handleFile={this.handleFile} name={this.state.file ? this.state.file.name : null}\n                                filePath={this.state.filePath}/>\n                    </header>\n                    <main>\n                        <section className=\"mainSection\">\n                            <Route path={[\"/kanban\",\"/gantt\",\"/list\"]} render={() => (\n                            <Filters\n                                setFilter={this.handleFilter}\n                                resources={this.state.resources}\n                                clearFilter={this.clearFilter}\n                                filters={this.state.filter}\n                                statusesList={this.taskStatuses}\n                            />)}/>\n\n                            <MainChart tasks={tasks}\n                                       resources={this.state.resources}\n                                       updateTask={this.updateTask}\n                                       name={this.state.file ? this.state.file.name : null}\n                                       downloadXmlFile={this.downloadXmlFile}\n                                       holidays={this.state.holidays}\n                                       filter={filter}\n                            />\n                        </section>\n                        <ChartNav/>\n                    </main>\n                </>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}