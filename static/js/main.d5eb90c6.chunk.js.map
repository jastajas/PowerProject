{"version":3,"sources":["images/arrow.svg","images/user.svg","images/main.jpg","images/duration.svg","images/toDo.svg","images/inProgress.svg","images/done.svg","images/rocket.svg","images/upload.svg","layouts/ChartNav.js","Charts/Kanban/KanbanTail.js","Charts/Kanban/KanbanBox.js","Components/ToolTipResource.js","Charts/Kanban/KanbanBoard.js","Charts/Gantt/GanttTask.js","Service/PowerDate.js","Charts/Gantt/GanttChart.js","Charts/List/TaskRow.js","Components/TaskForm.js","Charts/List/TaskList.js","Charts/MainPage.js","layouts/MainChart.js","layouts/Header.js","layouts/Filters.js","Service/PowerFileValidator.js","Errors/IncorrectFileError.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChartNav","state","isExtended","handleClickButton","setState","angleNavArrow","this","className","onClick","src","Arrow","alt","style","transform","width","to","React","Component","KanbanTail","props","task","complexName","resources","start","end","status","id","borderStyle","statusColor","borderLeft","getBorderStyle","taskOwners","length","key","onMouseOver","ev","activateToolTip","onMouseOut","disactivateToolTip","User","resource","name","taskName","map","index","KanbanBox","kanbanTails","kanbanTasks","ToolTipResource","slice","position","top","yPosition","left","xPosition","KanbanBoard","resourceInfo","taskId","clientY","clientX","positionX","positionY","tasksToDo","tasksInProgress","tasksDone","tasks","filter","isFinal","activeTaskIndex","findIndex","GanttTask","x","y","ganttConfig","taskHeight","innerGapSize","taskDescriptionSize","xOffset","yOffset","yText","xText","height","fontSize","PowerDate","date","dateToMilliseconds","reduce","firstDate","secondDate","stringDate","formatedDete","split","reverse","join","Date","parse","toISOString","substring","convertToGantTasks","maxTimeValue","getMaxTaskTimeValue","minTimeValue","getMinTaskTimeValue","ganttResolution","ganttCanvaWidth","taskInterval","gapSize","resolution","ordinalNo","ganttTaskFacotry","setGanttNominalWidth","duration","GanttChart","zoomScope","nominalWidth","zoom","handleZoomChange","target","value","gridDatesSize","daysGrid","prevProps","prevState","zoomOptions","h","ganttTasks","ganttGrid","ganttGridDates","increaseIndex","gridComponents","iteratorTerminator","i","push","timePoint","drawCanvaGrid","gridDates","getSimplifyDate","getGridDates","onChange","getStatusColor","statusName","backgroundColor","TaskRow","percentComplete","onDoubleClick","activateTaskForm","cursor","stopPropagation","TaskForm","finish","outlineNumber","outlineLevel","newResource","newEffort","newResourceId","messages","handleInputChange","handleNewResourceChange","addNewResource","alert","newAssignedResource","find","work","hours","minutes","seconds","handleResourceChange","deleteResource","resorcesList","department","resourcesInputs","type","step","min","display","htmlFor","max","exitTaskForm","TaskList","isResourceInfoActive","editedTaskId","handleDoubleClickRow","tableRows","editedTask","indexEditedTask","MainPage","taskInfo","startDate","finishDate","Duration","ToDo","Inprogress","Done","basicInfo","MainImage","MainChart","path","exact","render","Header","filePath","handleFile","Rocket","ref","inputFile","accept","click","Upload","Filters","filters","setFilter","angleFilterArrow","departmentList","array","indexOf","selected","get","clearFilter","defaultValue","PowerFileValidator","template","checkedObject","result","hasOwnProperty","Object","keys","isMsProjectStructure","file","Error","PROJECT_OBJECT_TEMPLATE","Project","Tasks","Task","Resources","Resource","Assignments","TASK_OBJECT_TEMPLATE","UID","_text","Name","Start","Finish","OutlineNumber","OutlineLevel","PercentComplete","RESOURCE_OBJECT_TEMPLATE","ASSIGNMENT_OBJECT_TEMPLATE","TaskUID","ResourceUID","Work","IncorrectFileError","params","captureStackTrace","readFile","handleFileContent","reader","FileReader","onload","event","readAsText","combineProjectElements","assignments","taskResources","assignment","resourceId","assignedResource","setComplexName","level","selectedTask","subtasks","subtask","startsWith","containResource","toUpperCase","includes","parseWorkObject","workCode","App","Map","files","TypeError","isXmlFile","handleProjctXml","getTaskStatus","endDate","today","now","startDay","endDay","xmlText","convert","require","msProjectJson","xml2js","compact","spaces","Assignment","Array","isArray","parseInt","mainOutlineNo","Group","forEach","error","message","console","log","stack","handleFilter","set","getDefaultFilters","taskFilter","basename","process","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5eb90c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.c317b9c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.209f1cd7.svg\";","module.exports = __webpack_public_path__ + \"static/media/main.9f46ca12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/duration.4687d6cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/toDo.fdc1b07c.svg\";","module.exports = __webpack_public_path__ + \"static/media/inProgress.33699397.svg\";","module.exports = __webpack_public_path__ + \"static/media/done.32ea9380.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.bc67068e.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.71cfd92a.svg\";","import React from \"react\";\r\nimport Arrow from \"../images/arrow.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './ChartNav.css';\r\n\r\nclass ChartNav extends React.Component {\r\n  state = {\r\n    isExtended: false\r\n  };\r\n\r\n  handleClickButton = () => {\r\n    const isExtended = !this.state.isExtended;\r\n    this.setState({ isExtended });\r\n  };\r\n\r\n  render() {\r\n    const angleNavArrow = this.state.isExtended ?  90 : 270;\r\n\r\n    return (\r\n      <aside className=\"chartNav\">\r\n        \r\n        <button onClick={this.handleClickButton}>\r\n            <img\r\n                src={Arrow}\r\n                alt=\"\"\r\n                style={{ transform: `rotate(${angleNavArrow}deg)` }}\r\n            />\r\n        </button>\r\n       \r\n        <nav style={{width: this.state.isExtended ? \"200px\" : \"0px\"}}>\r\n          <ul>\r\n            <li>\r\n              <NavLink className=\"navElement\" to=\"/kanban\"><p>kanban</p></NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink className=\"navElement\" to=\"/list\"><p>task list</p></NavLink>\r\n            </li>\r\n            <li>\r\n              <NavLink className=\"navElement\" to=\"/gantt\"><p>gantt</p></NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </aside>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartNav;\r\n","import React from \"react\";\r\nimport \"./KanbanTail.css\";\r\nimport User from \"../../images/user.svg\";\r\n\r\nconst getBorderStyle = status =>{\r\n\r\n  let statusColor = null\r\n    \r\n  switch (status) {\r\n  case \"done\":\r\n      statusColor = \"rgb(114, 161, 118)\";\r\n      break;\r\n  case \"to do\":\r\n      statusColor = \"rgb(138, 60, 60)\";\r\n      break;\r\n  case \"in progress\":\r\n      statusColor = \"rgb(218, 206, 144)\";\r\n      break;\r\n  default:\r\n      statusColor = \"transparent\";\r\n  }\r\n\r\n   return {borderLeft: `solid ${statusColor} 10px`};\r\n\r\n}\r\n\r\nconst KanbanTail = props => {\r\n  const {complexName, resources, start, end, status, id} = props.task;\r\n\r\n    \r\n  const borderStyle = getBorderStyle(status);\r\n\r\n\r\n    const taskOwners = resources.length ? (\r\n        <div key={resources[0].id} className=\"taskOwner\" onMouseOver={ev => props.activateToolTip(ev, id)} onMouseOut={props.disactivateToolTip}>\r\n            <img src={User} alt=\"\" /> <p>{resources[0].resource.name}</p> {resources.length > 1 && (<p> ...</p>)}\r\n        </div>) : (<p>-</p>);\r\n\r\n  const taskName = complexName.map((name, index) => (<p key={index}>{name}</p>));\r\n\r\n  return (\r\n    <div className=\"kanbanTail\" style={borderStyle}>\r\n      <h5>{taskName}</h5>\r\n      <div>{taskOwners}</div>\r\n      <div>\r\n        <p>\r\n          Start Date:{\" \"}\r\n          {start}\r\n        </p>\r\n        <p>\r\n          Deadline:{\" \"}\r\n          {end}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanTail;\r\n","import React from \"react\";\r\nimport KanbanTail from './KanbanTail';\r\nimport './KanbanBox.css';\r\n\r\n\r\n\r\nconst KanbanBox = (props) => {\r\n\r\n\r\n\r\n  const kanbanTails = props.kanbanTasks.map(task => <KanbanTail key={task.id} task={task} activateToolTip={props.activateToolTip} disactivateToolTip={props.disactivateToolTip}/>);\r\n\r\n  return (\r\n    <div className=\"kanbanBox\">\r\n      <div className=\"headerKanban\">\r\n          <h3 className=\"\">{props.name}</h3>\r\n          <p className=\"tailCounter\">{kanbanTails.length}</p>\r\n      </div>\r\n      <div className=\"kanbanList\">\r\n        {kanbanTails}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBox;\r\n","import React from 'react';\r\nimport User from \"../images/user.svg\";\r\nimport \"./ToolTipResource.css\";\r\n\r\nconst ToolTipResource = props => {\r\nconst {resources} = props;\r\n\r\n    const taskOwners = resources.slice(1, resources.length).map(resource => (\r\n        <>\r\n        <div className=\"resourceElement\" key={resource.resource.id}>\r\n          <img src={User} alt=\"\" /> <p>{resource.resource.name}</p>\r\n        </div>\r\n        </>\r\n      ));\r\n    \r\n      const position = {\r\n        top: props.yPosition,\r\n        left: props.xPosition,\r\n\r\n      }\r\n\r\n    return ( <div style={position} className=\"toolTipResource\">\r\n    {taskOwners}\r\n    </div> );\r\n}\r\n \r\nexport default ToolTipResource;\r\n","import React from \"react\";\r\nimport KanbanBox from \"./KanbanBox\";\r\nimport './KanbanBoard.css';\r\nimport ToolTipResource from '../../Components/ToolTipResource';\r\n\r\nclass KanbanBoard extends React.Component {\r\n    state = { \r\n        resourceInfo: null,\r\n     }\r\n\r\n     activateToolTip = (ev, taskId) =>{\r\n        const {clientY, clientX} = ev;\r\n\r\n        this.setState({\r\n            resourceInfo: {\r\n                taskId: taskId,\r\n                positionX: clientX,\r\n                positionY: clientY\r\n            }\r\n        })\r\n     }\r\n\r\n     disactivateToolTip = () =>{\r\n\r\n        this.setState({\r\n            resourceInfo: null,\r\n        })\r\n     }\r\n\r\n\r\n    render() { \r\n        let resources = [];\r\n        let tasksToDo = null;\r\n        let tasksInProgress = null;\r\n        let tasksDone = null;\r\n        if(this.props.tasks.length){\r\n            tasksToDo = this.props.tasks.filter(task => task.status === \"to do\" && task.isFinal);\r\n            tasksInProgress = this.props.tasks.filter(task => task.status === \"in progress\" && task.isFinal);\r\n            tasksDone = this.props.tasks.filter(task => task.status === \"done\" && task.isFinal);\r\n\r\n            if (this.state.resourceInfo){\r\n                const activeTaskIndex = this.props.tasks.findIndex(task => task.id === this.state.resourceInfo.taskId);\r\n                resources = this.props.tasks[activeTaskIndex].resources;\r\n            }\r\n\r\n        }\r\n        return this.props.tasks.length > 0 && (<div className=\"kanbanBoard\">\r\n                                                <KanbanBox name=\"to do\" kanbanTasks={tasksToDo} activateToolTip={this.activateToolTip} disactivateToolTip={this.disactivateToolTip}/>\r\n                                                <KanbanBox name=\"in progress\" kanbanTasks={tasksInProgress} activateToolTip={this.activateToolTip} disactivateToolTip={this.disactivateToolTip}/>\r\n                                                <KanbanBox name=\"done\" kanbanTasks={tasksDone} activateToolTip={this.activateToolTip} disactivateToolTip={this.disactivateToolTip}/>\r\n                                                {resources.length > 1 ? <ToolTipResource id=\"toolTip\" resources={resources} xPosition={this.state.resourceInfo.positionX} yPosition={this.state.resourceInfo.positionY}/>: null}\r\n                                            </div>);\r\n    }\r\n}\r\n \r\nexport default KanbanBoard;\r\n\r\n// const KanbanBoard = props => {\r\n\r\n    \r\n//     let tasksToDo = null;\r\n//     let tasksInProgress = null;\r\n//     let tasksDone = null;\r\n//     if(props.tasks.length){\r\n//         tasksToDo = props.tasks.filter(task => task.status === \"to do\" && task.isFinal);\r\n//         tasksInProgress = props.tasks.filter(task => task.status === \"in progress\" && task.isFinal);\r\n//         tasksDone = props.tasks.filter(task => task.status === \"done\" && task.isFinal);\r\n//     }\r\n//     return props.tasks.length > 0 && (<div className=\"kanbanBoard\">\r\n//                                             <KanbanBox name=\"to do\" kanbanTasks={tasksToDo}/>\r\n//                                             <KanbanBox name=\"in progress\" kanbanTasks={tasksInProgress}/>\r\n//                                             <KanbanBox name=\"done\" kanbanTasks={tasksDone}/>\r\n//                                         </div>);\r\n// };\r\n","import React from 'react';\r\nimport './GanttTask.css';\r\n\r\nconst GanttTask = props => {\r\n\r\n const {x, y, width, name} = props.task;\r\n const {taskHeight, innerGapSize, taskDescriptionSize, xOffset, yOffset} = props.ganttConfig;\r\n\r\n const yText = y + taskHeight + innerGapSize + 12;\r\n const xText = x + 5;\r\n\r\n\r\n    return(\r\n        <>\r\n            <rect className=\"gantTask\" x={x + xOffset} y={y + yOffset} width={width} height={taskHeight}/>\r\n            <text className=\"gantTaskDescription\" y={yText + yOffset} x={xText + xOffset} width=\"auto\" fontSize={taskDescriptionSize}>{name}</text>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default GanttTask;\r\n","class PowerDate{\r\n    \r\n    /**\r\n     * \r\n     * @param {*} tasks \r\n     */\r\n    static getMinTaskTimeValue (tasks) {\r\n        return tasks.map(task => task.start)\r\n            .map(date => this.dateToMilliseconds(date))\r\n            .reduce((firstDate, secondDate) => firstDate < secondDate ? firstDate : secondDate);\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} tasks \r\n     */\r\n    static getMaxTaskTimeValue (tasks) {\r\n        return tasks.map(task => task.end)\r\n            .map(date => this.dateToMilliseconds(date))\r\n            .reduce((firstDate, secondDate) => firstDate > secondDate ? firstDate : secondDate);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} stringDate \r\n     */\r\n    static dateToMilliseconds (stringDate) {\r\n        const formatedDete = stringDate.split(\".\").reverse().join(\"/\");\r\n        return Date.parse(formatedDete);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param date\r\n     * @returns {string}\r\n     */\r\n    static getSimplifyDate (date) {\r\n        const dateObject = new Date(date);\r\n        return dateObject.toISOString().substring(0,10);\r\n    }\r\n\r\n}\r\n\r\nexport default PowerDate;\r\n","import React from 'react';\r\nimport \"./GanttChart.css\";\r\nimport GanttTask from \"./GanttTask\";\r\nimport PowerDate from \"../../Service/PowerDate\";\r\n\r\n\r\nconst ganttTaskFacotry = (task, minTimeValue, resolution, ordinalNo, taskInterval) => {\r\n\r\n    const {start, end, complexName} = task;\r\n\r\n    const y = ordinalNo ? ordinalNo * taskInterval : ordinalNo;\r\n\r\n    let width = PowerDate.dateToMilliseconds(end) * resolution - PowerDate.dateToMilliseconds(start) * resolution;\r\n    width = width || 1;\r\n\r\n    const x = (PowerDate.dateToMilliseconds(task.start) - minTimeValue) * resolution;\r\n\r\n    const name = complexName.join(\" / \");\r\n\r\n    return {x, y, width, name}\r\n}\r\n\r\nconst convertToGantTasks = (tasks, ganttConfig) => {\r\n\r\n    const maxTimeValue = PowerDate.getMaxTaskTimeValue(tasks);\r\n\r\n    const minTimeValue = PowerDate.getMinTaskTimeValue(tasks);\r\n\r\n    const ganttResolution = ganttConfig.ganttCanvaWidth / (maxTimeValue - minTimeValue);\r\n\r\n    const taskInterval = ganttConfig.taskHeight + ganttConfig.taskDescriptionSize + ganttConfig.gapSize + ganttConfig.innerGapSize;\r\n\r\n    const ganttTasks = tasks.filter(task => task.isFinal)\r\n        .map((task, index) => ganttTaskFacotry(task, minTimeValue, ganttResolution, index, taskInterval));\r\n\r\n    return ganttTasks;\r\n\r\n}\r\n\r\nconst drawCanvaGrid = (ganttConfig, minTimeValue, maxTimeValue) => {\r\n    const {daysGrid, ganttCanvaWidth, xOffset} = ganttConfig;\r\n\r\n    const DAILY_MILLISECONDS = 86400000;\r\n    const increaseIndex = DAILY_MILLISECONDS * daysGrid * 2;\r\n\r\n    let gridComponents = [minTimeValue];\r\n    const iteratorTerminator = maxTimeValue - DAILY_MILLISECONDS * daysGrid * 2;\r\n\r\n    for (let i = minTimeValue; i <= iteratorTerminator; i += increaseIndex) {\r\n        gridComponents.push(i + increaseIndex);\r\n    }\r\n\r\n    const ganttResolution = (ganttCanvaWidth + 200) / (maxTimeValue - minTimeValue);\r\n\r\n    return gridComponents.map(timePoint => (\r\n        <rect className=\"gantGrid\" x={((timePoint - minTimeValue) * ganttResolution)+xOffset} y=\"0\"\r\n              width={DAILY_MILLISECONDS * daysGrid * ganttResolution} height=\"100%\"/>));\r\n\r\n}\r\n\r\nconst getGridDates = (ganttConfig, minTimeValue, maxTimeValue) => {\r\n    const {daysGrid, ganttCanvaWidth, xOffset, gridDatesSize} = ganttConfig;\r\n\r\n    const DAILY_MILLISECONDS = 86400000;\r\n    const increaseIndex = DAILY_MILLISECONDS * daysGrid;\r\n\r\n    let gridDates = [minTimeValue];\r\n    const iteratorTerminator = maxTimeValue - DAILY_MILLISECONDS * daysGrid;\r\n\r\n    for (let i = minTimeValue; i <= iteratorTerminator; i += increaseIndex) {\r\n        gridDates.push(i + increaseIndex);\r\n    }\r\n\r\n    const ganttResolution = (ganttCanvaWidth + 200) / (maxTimeValue - minTimeValue);\r\n\r\n\r\n    return gridDates.map((timePoint, index) => (\r\n        <text className=\"gantGrid-date\" x={((timePoint - minTimeValue) * ganttResolution)+xOffset} y=\"10\"\r\n    width=\"auto\" fontSize={gridDatesSize}>{PowerDate.getSimplifyDate(timePoint)}</text>));\r\n\r\n}\r\n\r\nconst setGanttNominalWidth = tasks =>{\r\n\r\n    const FOUR_MONTHS = 10368000000;\r\n    const GROWTH_INDEX = 1800 / FOUR_MONTHS;\r\n\r\n    const maxTimeValue = PowerDate.getMaxTaskTimeValue(tasks);\r\n    const minTimeValue = PowerDate.getMinTaskTimeValue(tasks);\r\n\r\n    const duration = maxTimeValue - minTimeValue;\r\n\r\n    return duration <= FOUR_MONTHS ? 1800 : 1800 + (duration - FOUR_MONTHS) * GROWTH_INDEX;\r\n\r\n}\r\n\r\nclass GanttChart extends React.Component {\r\n\r\n    zoomScope = [0.1,0.25,0.5,0.75,1,1.25,1.5,2,3];\r\n\r\n    state = {\r\n        nominalWidth: this.props.tasks.length && setGanttNominalWidth(this.props.tasks),\r\n        zoom: 1,\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const nominalWidth = this.props.tasks.length && setGanttNominalWidth(this.props.tasks);\r\n        nominalWidth !== prevState.nominalWidth && this.setState({nominalWidth,zoom:1});\r\n    }\r\n\r\n    handleZoomChange = (ev)=>{\r\n\r\n        const zoom = ev.target.value;\r\n\r\n        this.setState({zoom});\r\n\r\n    }\r\n\r\n    ganttConfig = {\r\n        ganttCanvaWidth: this.state.nominalWidth * this.state.zoom,\r\n        taskHeight: 15,\r\n        innerGapSize: 2,\r\n        taskDescriptionSize: 14,\r\n        gridDatesSize: 10,\r\n        gapSize: 15,\r\n        xOffset: 30,\r\n        yOffset: 50,\r\n        daysGrid: 5\r\n    }\r\n\r\n    render() {\r\n\r\n        this.ganttConfig.ganttCanvaWidth = this.state.nominalWidth * this.state.zoom < 1800 ? 1800 : this.state.nominalWidth * this.state.zoom;\r\n\r\n\r\n        const zoomOptions = this.zoomScope.map(zoom => (<option value={zoom}>{zoom}</option>));\r\n\r\n        let h = 0;\r\n        let ganttTasks = null;\r\n        let ganttGrid = null;\r\n        let ganttGridDates = null;\r\n        \r\n        if (this.props.tasks.length) {\r\n            h = (this.props.tasks.filter(task => task.isFinal).length * (this.ganttConfig.taskHeight + this.ganttConfig.taskDescriptionSize + this.ganttConfig.innerGapSize + this.ganttConfig.gapSize));\r\n            ganttTasks = convertToGantTasks(this.props.tasks, this.ganttConfig);\r\n            ganttTasks = ganttTasks.map(task => (<GanttTask task={task} ganttConfig={this.ganttConfig}/>));\r\n            ganttGrid = drawCanvaGrid(this.ganttConfig, PowerDate.getMinTaskTimeValue(this.props.tasks), PowerDate.getMaxTaskTimeValue(this.props.tasks));\r\n            ganttGridDates = getGridDates(this.ganttConfig, PowerDate.getMinTaskTimeValue(this.props.tasks), PowerDate.getMaxTaskTimeValue(this.props.tasks));\r\n        }\r\n         \r\n        return (<section className=\"gantt-chart\">\r\n        <svg width={this.ganttConfig.ganttCanvaWidth + 200} height=\"50px\" className=\"ganttCanvaHeader\">\r\n            {ganttGridDates || false}   \r\n        </svg>\r\n        <svg width={this.ganttConfig.ganttCanvaWidth + 200} height={h} className=\"ganttCanva\">\r\n            {ganttGrid || false}\r\n            {/* {ganttGridDates || false} */}\r\n            {ganttTasks || false}\r\n        </svg>\r\n        <select className=\"zoomSelection\" name=\"zoom\" value={this.state.zoom} onChange={ev=>this.handleZoomChange(ev)}>\r\n             {zoomOptions}\r\n         </select></section>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default GanttChart;\r\n","import React from 'react';\r\n \r\nconst getStatusColor = statusName => {\r\n    let statusColor = null\r\n    switch (statusName) {\r\n    case \"done\":\r\n        statusColor = \"rgb(139, 204, 143)\";\r\n        break;\r\n    case \"to do\":\r\n        statusColor = \"rgb(204, 139, 139)\";\r\n        break;\r\n    case \"in progress\":\r\n        statusColor = \"rgb(242, 238, 153)\";\r\n        break;\r\n    default:\r\n        statusColor = \"transparent\";\r\n    }\r\n\r\n    return {backgroundColor: statusColor};\r\n\r\n}\r\n\r\nconst TaskRow = props => {\r\n\r\n    const {id, complexName, start, end, status, resources, percentComplete} = props.task;\r\n\r\n    const resource = resources.length ? resources[0].resource.name : \"-\";\r\n    \r\n    return (<tr onDoubleClick={()=>props.activateTaskForm(id)}>\r\n        <td>{props.index + 1}</td>\r\n        <td>{complexName.join(\" / \")}</td>\r\n        <td>{start.substring(0,10)}</td>\r\n        <td>{end.substring(0,10)}</td>\r\n        <td style={getStatusColor(status)}>{status}</td>\r\n        <td style={{cursor: \"default\"}} onMouseOver={ev=>{ props.activateToolTip(ev,id);}} onMouseOut={props.disactivateToolTip}>{resource + (resources.length > 1 ? \" ...\" : \"\")}</td>\r\n<td onDoubleClick={ev => ev.stopPropagation()}>{percentComplete}</td>\r\n    </tr>);\r\n}\r\n \r\nexport default TaskRow;","import React from 'react';\r\nimport './TaskForm.css';\r\n\r\nclass TaskForm extends React.Component {\r\n    state = {\r\n        task: {\r\n            id: this.props.task.id,\r\n            name: this.props.task.name,\r\n            start: this.props.task.start,\r\n            finish: this.props.task.end,\r\n            outlineNumber: \"\",\r\n            outlineLevel: \"\",\r\n            resources: this.props.task.resources,\r\n            percentComplete: this.props.task.percentComplete,\r\n            status: this.props.task.status,\r\n        },\r\n        newResource: {\r\n            newEffort: 0,\r\n            newResourceId: null,\r\n        }\r\n    }\r\n\r\n    messages = {\r\n        name:\"\",\r\n        start: \"\",\r\n        finish: this.props.task.end,\r\n        outlineNumber: \"\",\r\n        outlineLevel: \"\",\r\n        resources: this.props.task.resources,\r\n        percentComplete: this.props.task.percentComplete,\r\n        status: this.props.task.status,\r\n\r\n    }\r\n\r\n    handleInputChange = ev => {\r\n\r\n        const {name, value} = ev.target;\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n            task[name] = value;\r\n\r\n            return {task};\r\n        })\r\n\r\n    }\r\n    handleNewResourceChange = ev => {\r\n        const {name, value} = ev.target;\r\n\r\n        this.setState(prevState => {\r\n            const {newResource} = prevState;\r\n            newResource[name] = value;\r\n\r\n            return {newResource};\r\n        })\r\n\r\n    }\r\n\r\n    addNewResource = () => {\r\n        const {newResourceId, newEffort} = this.state.newResource;\r\n\r\n        if (!newResourceId && !newResourceId.length) return alert(\"NIE WYBRANO ZASOBU!!!\");\r\n\r\n        const newAssignedResource = {\r\n            resource: this.props.resources.find(resource => resource.id === newResourceId),\r\n            work: {\r\n                hours: newEffort,\r\n                minutes: 0,\r\n                seconds: 0\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n            task.resources.push(newAssignedResource);\r\n            return {\r\n                task,\r\n                newResource: {\r\n                    newResourceId: 0,\r\n                    newEffort: 0\r\n                }\r\n            };\r\n        })\r\n    }\r\n\r\n    handleResourceChange = (ev, id) => {\r\n\r\n        const {name, value} = ev.target;\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n\r\n            task.resources = task.resources.map(resource => {\r\n                if (resource.resource.id !== id) return resource;\r\n\r\n                if (name === \"resource\") {\r\n                    resource.resource = this.props.resources && this.props.resources.find(resource => resource.id === value);\r\n                } else if (name === \"work\") {\r\n                    resource.work.hours = value;\r\n                }\r\n\r\n                return resource;\r\n            });\r\n            return {task};\r\n        })\r\n\r\n    }\r\n\r\n    deleteResource = id => {\r\n\r\n        this.setState(prevState => {\r\n            const {task} = prevState;\r\n            task.resources = task.resources.filter(resource => resource.resource.id !== id);\r\n            return {task};\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const {name, start, finish, resources, percentComplete} = this.state.task;\r\n\r\n        const resorcesList = this.props.resources && this.props.resources\r\n            .filter(resource => resource.name !== \"\")\r\n            .map(resource => {\r\n                return {resource: resource.name + \" - \" + resource.department, id: resource.id};\r\n            })\r\n            .map((resource, index) => (<option key={index} value={resource.id}>{resource.resource}</option>));\r\n\r\n        const resourcesInputs = resources.map(resource => (\r\n            <div className=\"resourceBlock\">\r\n                <select value={resource.resource.id} name=\"resource\"\r\n                        onChange={ev => this.handleResourceChange(ev, resource.resource.id)}>\r\n                    {resorcesList}\r\n                </select>\r\n                <input className=\"workInput\" type=\"number\" name=\"work\" step=\"1\" min=\"0\" value={resource.work.hours}\r\n                       onChange={ev => this.handleResourceChange(ev, resource.resource.id)}/>\r\n                <button type=\"button\" onClick={() => {\r\n                    this.deleteResource(resource.resource.id)\r\n                }}>X\r\n                </button>\r\n            </div>))\r\n\r\n        return (\r\n\r\n            <form className=\"taskForm\" style={{display: \"block\"}}>\r\n                <div className=\"taskFormChart\"><h3>Task Chart</h3>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"taskNameInput\"><span>t</span>ask <span>n</span>ame:</label>\r\n                        <input id=\"taskNameInput\" type=\"text\" name=\"name\" value={name}\r\n                               onChange={ev => this.handleInputChange(ev)}/>\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"startDateInput\"><span>s</span>tart:</label>\r\n                        <input id=\"startDateInput\" type=\"date\" name=\"start\" value={start}\r\n                               onChange={ev => this.handleInputChange(ev)}/>\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"finishDateInput\"><span>e</span>nd:</label>\r\n                        <input id=\"finishDateInput\" type=\"date\" name=\"finish\" value={finish}\r\n                               onChange={ev => this.handleInputChange(ev)}/>\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"resourceInput\"><span>r</span>esources and efforts:</label>\r\n                        <div className=\"resourceBlock\">\r\n                            <select id=\"resourceInput\" name=\"newResourceId\" value={this.state.newResource.newResourceId}\r\n                                    onChange={ev => this.handleNewResourceChange(ev)}>\r\n                                <option value=\"\">Select...</option>\r\n                                {resorcesList}\r\n                            </select>\r\n                            <input id=\"workInput\" className=\"workInput\" type=\"number\" name=\"newEffort\"\r\n                                   value={this.state.newResource.newEffort}\r\n                                   onChange={ev => this.handleNewResourceChange(ev)}/>\r\n                            <button type=\"button\" onClick={this.addNewResource}>ADD</button>\r\n                        </div>\r\n                        {resourcesInputs}\r\n                    </div>\r\n                    <div className=\"formElement\">\r\n                        <label htmlFor=\"completeInput\"><span>c</span>ompletion:</label>\r\n                        <input id=\"completeInput\" step=\"1\" min=\"0\" max=\"100\" type=\"number\" name=\"percentComplete\"\r\n                               value={percentComplete} onChange={ev => this.handleInputChange(ev)}/>\r\n                    </div>\r\n                    <div className=\"formButtons\">\r\n                        <input type=\"submit\" value=\"save\"></input>\r\n                        <button type=\"button\" onClick={() => this.props.exitTaskForm()}>cancel</button>\r\n                    </div>\r\n                </div>\r\n            </form>);\r\n    }\r\n}\r\n\r\nexport default TaskForm;\r\n","import React from 'react';\r\nimport TaskRow from './TaskRow';\r\nimport './TaskList.css';\r\nimport TaskForm from '../../Components/TaskForm';\r\nimport ToolTipResource from '../../Components/ToolTipResource';\r\n\r\nclass TaskList extends React.Component {\r\n    state = {\r\n        isResourceInfoActive: false,\r\n        editedTaskId: null,\r\n        resourceInfo: null\r\n     }\r\n\r\n\r\n     activateToolTip = (ev, taskId) =>{\r\n        const {clientY, clientX} = ev;\r\n\r\n        this.setState({\r\n            resourceInfo: {\r\n                taskId: taskId,\r\n                positionX: clientX,\r\n                positionY: clientY\r\n            }\r\n        })\r\n     }\r\n     disactivateToolTip = () =>{\r\n\r\n        this.setState({\r\n            resourceInfo: null,\r\n        })\r\n     }\r\n\r\n     handleDoubleClickRow = editedTaskId => {\r\n        this.setState({editedTaskId});\r\n    }\r\n\r\n    exitTaskForm = () =>{\r\n        this.setState({editedTaskId: null,});\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let resources = [];\r\n        let tableRows = null;\r\n        let editedTask = null;\r\n        if(this.props.tasks.length){\r\n\r\n            tableRows = this.props.tasks.map((task, index)=>(<TaskRow key={task.id} task={task} index={index} activateToolTip={this.activateToolTip} disactivateToolTip={this.disactivateToolTip} activateTaskForm={this.handleDoubleClickRow} />));\r\n\r\n            const indexEditedTask = this.state.editedTaskId && this.props.tasks.findIndex(task => task.id === this.state.editedTaskId);\r\n            \r\n            editedTask = indexEditedTask >= 0 && this.props.tasks[indexEditedTask];\r\n\r\n            if (this.state.resourceInfo){\r\n                const activeTaskIndex = this.props.tasks.findIndex(task => task.id === this.state.resourceInfo.taskId);\r\n                resources = this.props.tasks[activeTaskIndex].resources;\r\n            }\r\n        \r\n        }\r\n        return this.props.tasks.length > 0 && (<section className=\"taskList\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>on</th>\r\n                        <th>name</th>\r\n                        <th>start</th>\r\n                        <th>end</th>\r\n                        <th>status</th>\r\n                        <th>resources</th>\r\n                        <th>complete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableRows}\r\n                </tbody>\r\n            </table>\r\n            {resources.length > 1 ? <ToolTipResource id=\"toolTip\" resources={resources} xPosition={this.state.resourceInfo.positionX} yPosition={this.state.resourceInfo.positionY}/>: null}\r\n            {editedTask && <TaskForm task={editedTask} exitTaskForm={this.exitTaskForm} resources={this.props.resources}/>}\r\n            </section> );\r\n       \r\n    }\r\n    }\r\n \r\nexport default TaskList;\r\n\r\n","import React from 'react';\r\nimport \"./MainPage.css\";\r\nimport MainImage from \"../images/main.jpg\";\r\nimport Duration from \"../images/duration.svg\";\r\nimport ToDo from \"../images/toDo.svg\";\r\nimport Inprogress from \"../images/inProgress.svg\";\r\nimport Done from \"../images/done.svg\";\r\nimport PowerDate from \"../Service/PowerDate\";\r\n\r\n\r\nconst MainPage = props => {\r\n\r\n    let taskInfo = null;\r\n\r\n    if (props.tasks.length) {\r\n        const tasksToDo = props.tasks.filter(task => task.status === \"to do\" && task.isFinal).length;\r\n        const tasksInProgress = props.tasks.filter(task => task.status === \"in progress\" && task.isFinal).length;\r\n        const tasksDone = props.tasks.filter(task => task.status === \"done\" && task.isFinal).length;\r\n\r\n        let startDate = PowerDate.getMinTaskTimeValue(props.tasks);\r\n        let finishDate = PowerDate.getMaxTaskTimeValue(props.tasks);\r\n\r\n        taskInfo = (<div className=\"main-page-info\">\r\n            <h2>Project {props.name.split(\".xml\")[0]}</h2>\r\n            <ul>\r\n                <li><img src={Duration} alt=\"\"/>\r\n                    <p>project duration from {PowerDate.getSimplifyDate(startDate)} to {PowerDate.getSimplifyDate(finishDate)} </p>\r\n                </li>\r\n                <li><img src={ToDo} alt=\"\"/>\r\n                    <p>count task to do: {tasksToDo}</p>\r\n                </li>\r\n                <li><img src={Inprogress} alt=\"\"/>\r\n                    <p>count task in progress: {tasksInProgress}</p>\r\n                </li>\r\n                <li><img src={Done} alt=\"\"/>\r\n                    <p>count task done: {tasksDone}</p>\r\n                </li>\r\n            </ul>\r\n        </div>)\r\n    }\r\n    const basicInfo = (<div className=\"main-page-info\"><h2>no project loaded</h2>\r\n    <p className=\"main-page-description\">This is application for reading MS Project schedule with xml extension. Please apply project file by click button in the right up corner.</p></div>)\r\n\r\n    return (<section className=\"main-page\">\r\n        <img className=\"main-page-heroImg\" src={MainImage} alt=\"\"/>\r\n            {taskInfo || basicInfo}\r\n\r\n    </section>);\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport KanbanBoard from '../Charts/Kanban/KanbanBoard';\r\nimport GanttChart from '../Charts/Gantt/GanttChart';\r\nimport TaskList from '../Charts/List/TaskList';\r\nimport './MainChart.css';\r\nimport MainPage from \"../Charts/MainPage\";\r\n\r\nconst MainChart = props => {\r\n    return ( \r\n    <section className=\"mainChart\">\r\n        <Route path=\"/\" exact={true} render={() => <MainPage  {...props} />}/>\r\n        <Route path=\"/kanban\" render={() => <KanbanBoard  {...props} />}/>\r\n        <Route path=\"/gantt\" render={() => <GanttChart {...props} />}/>\r\n        <Route path=\"/list\" render={() => <TaskList {...props} />}/>\r\n    </section> \r\n    );\r\n}\r\n \r\nexport default MainChart;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport Rocket from \"../images/rocket.svg\";\r\nimport Upload from \"../images/upload.svg\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Header extends React.Component {\r\n\r\n\r\n  render() {\r\n    const {name, filePath, handleFile} = this.props;\r\n    return (\r\n      <div className=\"header\">\r\n        <Link className=\"header-logo\" to=\"/\" style={{ width: \"300px\", height: \"50px\", display: \"flex\" }}>\r\n          <img src={Rocket} alt=\"\" />\r\n          <p>Power Project</p>\r\n        </Link>\r\n        {/* <div className=\"header-logo\" style={{ width: \"300px\", height: \"50px\", display: \"flex\" }}>\r\n          <img src={Rocket} alt=\"\" />\r\n          <p>Power Project</p>\r\n        </div> */}\r\n        <p className=\"uppercaseBold\">{name ? name.split(\".xml\")[0] : \"\"}</p>\r\n        <input ref={inputFile => this.inputFile = inputFile} type=\"file\" accept=\"text/xml\" value={filePath} onChange={ev => handleFile(ev)}\r\n          style={{ display: \"none\" }}/>\r\n        <button type=\"button\" onClick={()=>this.inputFile.click()}>\r\n          <img src={Upload} alt=\"\" />\r\n          <p>APPLY PROJECT</p>\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Arrow from \"../images/arrow.svg\";\r\nimport './Filters.css';\r\n\r\nclass Filters extends React.Component {\r\n    state = {\r\n        isExtended: false,\r\n    }\r\n\r\n\r\n    handleClickButton = () => {\r\n        const isExtended = !this.state.isExtended;\r\n        this.setState({isExtended});\r\n    }\r\n\r\n    render() {\r\n        const {filters} = this.props;\r\n        const {setFilter, resources} = this.props;\r\n        const angleFilterArrow = this.state.isExtended ? 180 : 0;\r\n\r\n        const departmentList = resources && resources.filter(resource => resource.department !== \"\")\r\n                .map(resource => resource.department)\r\n                .filter((department, index, array) => array.indexOf(department) === index && department !== null)\r\n                .map((department, index) => (<option key={index} value={department} selected={department===filters.get(\"department\")}>{department}</option>));\r\n\r\n\r\n        return (\r\n            <section className=\"filters\">\r\n                <button onClick={this.handleClickButton}>\r\n                    <img src={Arrow} alt=\"arrow\" style={{transform: `rotate(${angleFilterArrow}deg)`}}/>\r\n                    <p>filters</p>\r\n                </button>\r\n                <div className=\"filter-inputs\" style={{height: this.state.isExtended ? \"80px\" : \"0px\"}}>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"nameFilter\">task name:</label>\r\n                        <input id=\"nameFilter\" type=\"text\" name=\"name\" onChange={setFilter} value={filters.get(\"name\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"name\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"startDateFilter\">task start:</label>\r\n                        <input id=\"startDateFilter\" type=\"date\" name=\"start\" onChange={setFilter} value={filters.get(\"start\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"start\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"endDateFilter\">task end:</label>\r\n                        <input id=\"endDateFilter\" type=\"date\" name=\"end\" onChange={setFilter} value={filters.get(\"end\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"end\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"personFilter\">task owner:</label>\r\n                        <input id=\"personFilter\" type=\"text\" name=\"person\" onChange={setFilter} value={filters.get(\"person\")}/>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"person\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <div className=\"inputBox\">\r\n                        <label htmlFor=\"departmentFilter\">department:</label>\r\n                        <select id=\"departmentFilter\" name=\"department\" onChange={setFilter} defaultValue=\"\">\r\n                            <option value=\"\">Select...</option>\r\n                            {departmentList || false}\r\n                        </select>\r\n                        <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"department\" className=\"clear-button\">X</button>\r\n                    </div>\r\n                    <button type=\"button\" onClick={ev=>this.props.clearFilter(ev)} name=\"all\" className=\"clear-all-button\">clear all</button>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filters;\r\n\r\n","class PowerFileValidator{\r\n\r\n    static PROJECT_OBJECT_TEMPLATE = {\r\n        Project: {\r\n          Tasks: {\r\n            Task: []\r\n          },\r\n          Resources: {\r\n            Resource: []\r\n          },\r\n          Assignments: {}\r\n        }\r\n      };\r\n\r\n      static TASK_OBJECT_TEMPLATE = {\r\n        UID: {\r\n          _text: \"\",\r\n        },\r\n        Name:{\r\n          _text: \"\",\r\n        },\r\n        Start: {\r\n          _text: \"\",\r\n        },\r\n        Finish:{\r\n          _text: \"\",\r\n        },\r\n        OutlineNumber:{\r\n          _text: \"\",\r\n        },\r\n        OutlineLevel:{\r\n          _text: \"\",\r\n        },\r\n        PercentComplete:{\r\n          _text: \"\",\r\n        }\r\n      };\r\n\r\n      static RESOURCE_OBJECT_TEMPLATE = {\r\n        UID: {\r\n          _text: \"\"\r\n        },\r\n        Name: {\r\n          _text: \"\"\r\n        }\r\n      }\r\n\r\n      static ASSIGNMENT_OBJECT_TEMPLATE = {\r\n        TaskUID: {\r\n          _text: \"\"\r\n        },\r\n        ResourceUID: {\r\n          _text: \"\"\r\n        },\r\n        Work: {\r\n          _text: \"\"\r\n        }\r\n      }\r\n      \r\n      static isMsProjectStructure (template, checkedObject) {\r\n        let result = true;\r\n        for (const key in template) {\r\n\r\n          if (!template.hasOwnProperty(key) || !checkedObject.hasOwnProperty(key)){\r\n            return false;\r\n          }\r\n\r\n          if (typeof template[key] === \"object\" && Object.keys(template[key]).length) {\r\n            result = this.isMsProjectStructure(template[key], checkedObject[key]);\r\n          }\r\n\r\n          if(!result) break;\r\n\r\n        }\r\n        return result;\r\n      }\r\n\r\n      static isXmlFile(file) {\r\n       \r\n        if (file) throw new Error(\"No files provided!\");\r\n      \r\n        return \"text/xml\" === file.type;\r\n      }\r\n\r\n\r\n}\r\nexport default PowerFileValidator;\r\n","class IncorrectFileError extends Error {\r\n    constructor(...params) {\r\n      // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n      super(...params);\r\n  \r\n      // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n      if (Error.captureStackTrace) {\r\n        Error.captureStackTrace(this, IncorrectFileError);\r\n      }\r\n    }\r\n\r\n  }\r\n  export default IncorrectFileError;","import React from \"react\";\nimport \"./App.css\";\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport ChartNav from \"./layouts/ChartNav\";\nimport MainChart from \"./layouts/MainChart\";\nimport Header from \"./layouts/Header\";\nimport Filters from './layouts/Filters';\nimport PowerFileValidator from \"./Service/PowerFileValidator\";\nimport IncorrectFileError from \"./Errors/IncorrectFileError\";\n\n\nconst readFile = (file, handleFileContent) => {\n    const reader = new FileReader();\n\n    reader.onload = event => {\n        event.target.result && handleFileContent(event.target.result);\n    };\n\n    file && reader.readAsText(file);\n}\n\n\nfunction isXmlFile(file) {\n\n\n    if (/*!inputFileElement.files.length*/ !file) throw new Error(\"No files provided!\");\n\n    return \"text/xml\" === /*inputFileElement.files[0]*/file.type;\n\n}\n\nconst combineProjectElements = (tasks, resources, assignments) => {\n    tasks = tasks.map(task => {\n\n        const taskResources = assignments\n                        .filter(assignment => assignment.taskId === task.id && assignment.resourceId >= 0)\n                        .map(assignment => {\n                            const assignedResource = {};\n                            assignedResource.resource = resources.find(resource => resource.id === assignment.resourceId);\n                            assignedResource.work = assignment.work;\n                            return assignedResource;\n                           \n                        });\n\n        task.resources = taskResources;\n\n        return task;\n    });\n    return tasks;\n}\n\nconst setComplexName = (tasks, outlineNumber, name = [], level = 1) => {\n\n    level++;\n\n    const selectedTask = tasks.find(task => task.outlineNumber === outlineNumber);\n\n    const subtasks = tasks.filter(subtask => subtask.outlineNumber.startsWith(selectedTask.outlineNumber) && subtask.outlineLevel === level)\n        .map(subtask => {\n            setComplexName(tasks, subtask.outlineNumber, [...name, selectedTask.name], level);\n            return subtask;\n        });\n\n    selectedTask.isFinal = !subtasks.length;\n    selectedTask.complexName = !subtasks.length ? [...name, selectedTask.name] : null;\n\n\n}\n\nconst getSimplifyDate = date => {\n    if (!date) return \"\";\n    const dateObject = new Date(date);\n    return dateObject.toISOString().substring(0,10);\n}\n\nconst taskFilter = (task, filters) => {\n\n  return   task.complexName.findIndex(name => name.toUpperCase().includes(filters.get(\"name\").toUpperCase())) + 1 &&\n           task.start.includes(filters.get(\"start\")) &&\n           task.end.includes(filters.get(\"end\")) &&\n           containResource(task,filters);\n}\n\nconst containResource = (task, filters) =>{\n\n    if (filters.get(\"person\") === \"\" && filters.get(\"department\") === \"\") return true;\n\n    return task.resources.findIndex(resource => resource.resource.name.toUpperCase().includes(filters.get(\"person\").toUpperCase())\n    && resource.resource.department.includes(filters.get(\"department\"))) + 1;\n\n}\nconst parseWorkObject = (workCode) =>{\n    \n    const work = {};\n   \n    work.hours = workCode.split(\"PT\")[1].split(\"H\")[0];\n    work.minutes = workCode.split(\"H\")[1].split(\"M\")[0];\n    work.seconds = workCode.split(\"M\")[1].split(\"S\")[0];\n\n    return work;\n}\n\nclass App extends React.Component {\n    state = {\n        file: null,\n        tasks: [],\n        filter: new Map(),\n    };\n\n    handleFile = ev => {\n\n        if (!ev.target.files) throw new TypeError(\"Incorrect element type!\");\n        if (!ev.target.files.length) throw new Error(\"No files attached\");\n\n        const file = ev.target.files[0];\n\n        if(!isXmlFile(file)) return alert(\"Niewłaściwy format pliku! \\n Wprowadź plik xml.\");\n\n        this.setState({file});\n        readFile(file, this.handleProjctXml);\n    };\n\n    getTaskStatus = (startDate, endDate) => {\n        const today = Date.now();\n        const startDay = Date.parse(startDate);\n        const endDay = Date.parse(endDate);\n\n        if (today < startDay) return \"to do\";\n        if (today > endDay) return \"done\";\n        return \"in progress\";\n    };\n\n    handleProjctXml = xmlText => {\n        const convert = require(\"xml-js\");\n       try {\n            const msProjectJson = convert.xml2js(xmlText, {\n                compact: true,\n                spaces: 4\n            });\n\n            if(!PowerFileValidator.isMsProjectStructure(PowerFileValidator.PROJECT_OBJECT_TEMPLATE,msProjectJson)) throw new IncorrectFileError(\"It isn't MS Project file.Please select correct file.\");\n\n            let {\n                Tasks: {Task: tasks},\n                Resources: {Resource: resources},\n                Assignments: {Assignment: assignments}\n            } = msProjectJson.Project;\n\n            tasks = Array.isArray(tasks) ? tasks : [tasks];\n\n            tasks = tasks.filter(task => PowerFileValidator.isMsProjectStructure(PowerFileValidator.TASK_OBJECT_TEMPLATE, task) && task.UID._text !== \"0\")\n                .map(task => ({\n                    id: task.UID._text,\n                    name: task.Name._text,\n                    start: getSimplifyDate(task.Start._text),\n                    end: getSimplifyDate(task.Finish._text),\n                    status: this.getTaskStatus(task.Start._text, task.Finish._text),\n                    outlineNumber: task.OutlineNumber._text,\n                    outlineLevel: parseInt(task.OutlineLevel._text),\n                    mainOutlineNo: parseInt(task.OutlineNumber._text.split(\".\")[0]),\n                    percentComplete: task.PercentComplete._text\n                }));\n\n            resources = Array.isArray(resources) ? resources : [resources];\n            resources = resources\n                .filter(resource => PowerFileValidator.isMsProjectStructure(PowerFileValidator.RESOURCE_OBJECT_TEMPLATE, resource))\n                .map(resource => ({\n                    id: resource.UID._text,\n                    name: resource.Name._text,\n                    department: resource.Group ? resource.Group._text : \"\"\n                }));\n\n            assignments = assignments || [];\n            assignments = Array.isArray(assignments) ? assignments : [assignments];\n            assignments = assignments\n                .filter(assignment => PowerFileValidator.isMsProjectStructure(PowerFileValidator.ASSIGNMENT_OBJECT_TEMPLATE, assignment))\n                .map(assignment => ({\n                    taskId: assignment.TaskUID._text,\n                    resourceId: assignment.ResourceUID._text,\n                    work: parseWorkObject(assignment.Work._text)\n                }));\n\n            tasks = combineProjectElements(tasks, resources, assignments);\n\n            tasks.filter(task => task.outlineLevel === 1)\n                .forEach(task => setComplexName(tasks, task.outlineNumber));\n\n            this.setState(() => {\n                return {\n                    tasks,\n                    resources\n                };\n            });\n       } catch (error) {\n            alert(error.message);\n            alert(error.name);\n            console.log(error.stack);\n       }\n    };\n\n    handleFilter = ev => {\n\n        const {name, value} = ev.target;\n\n        this.setState(prevState => {\n            const {filter} = prevState;\n            filter.set(name, value);\n\n            return {filter};\n        })\n    }\n\n    clearFilter = ev => {\n\n        const {name} = ev.target;\n        \n        if(name !== \"all\"){\n            this.setState(prevState => {\n                const {filter} = prevState;\n                filter.set(name, \"\");\n\n                return {filter};\n            })\n        }else{\n            this.getDefaultFilters();\n        }\n    }\n\n\n    componentDidMount() {\n        this.getDefaultFilters();\n    }\n\n    getDefaultFilters = () =>{\n        this.setState(prevState => {\n            const {filter} = prevState;\n            filter.set(\"name\", \"\");\n            filter.set(\"person\", \"\");\n            filter.set(\"start\", \"\");\n            filter.set(\"end\", \"\");\n            filter.set(\"department\", \"\");\n\n            return {filter};\n        })\n    }\n\n    render() {\n\n        const tasks = this.state.tasks.filter(task => task.complexName)\n            .filter(task => taskFilter(task, this.state.filter));\n\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <>\n                    <header>\n                        <Header handleFile={this.handleFile} name={this.state.file?this.state.file.name:null} filePath={this.state.filePath}/>\n                    </header>\n                    <main>\n                        <section className=\"mainSection\">\n                            <Filters setFilter={this.handleFilter} resources={this.state.resources} clearFilter={this.clearFilter}  filters={this.state.filter}/>\n\n                            <MainChart tasks={tasks} resources={this.state.resources} name={this.state.file?this.state.file.name:null}/>\n                        </section>\n                        <ChartNav/>\n                    </main>\n                </>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}